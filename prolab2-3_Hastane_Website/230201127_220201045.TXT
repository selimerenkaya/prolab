# Projede kullanılacak olan sınıfları içerir
# 230201127 - Selim Eren Kaya
# 220201045 - Bilge Çeşme
# Tarafından python 3.12 sürümünde yapılmıştır
from flask import Flask, render_template, request, redirect, url_for, jsonify
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
import sqlite3
import random
import faker


# Randevu Sınıfı
class Randevu:
    def __init__(self, randevuID: int, randevuDoktorID: int, randevuHastaID: int,
                 randevuTarih: str, randevuSaat: str) -> None:
        self.__randevuID = randevuID
        self.__randevuTarih = randevuTarih
        self.__randevuSaat = randevuSaat
        self.__randevuDoktorID = randevuDoktorID
        self.__randevuHastaID = randevuHastaID
        print("Randevu")

    # Get/Set Metotları
    # 1-Get Metotları
    def getRandevuID(self) -> int:
        return self.__randevuID

    def getRandevuTarih(self) -> str:
        return self.__randevuTarih

    def getRandevuSaat(self) -> str:
        return self.__randevuSaat

    def getRandevuDoktorID(self) -> int:
        return self.__randevuDoktorID

    def getRandevuHastaID(self) -> int:
        return self.__randevuHastaID

    # 2-Set Metotları
    def setRandevuID(self, randevuID: int) -> None:
        self.__randevuID = randevuID

    def setRandevuTarih(self, randevuTarih: str) -> None:
        self.__randevuTarih = randevuTarih

    def setRandevuSaat(self, randevuSaat: str) -> None:
        self.__randevuSaat = randevuSaat

    def setRandevuDoktorID(self, randevuDoktorID: int) -> None:
        self.__randevuDoktorID = randevuDoktorID

    def setRandevuHastaID(self, randevuHastaID: int) -> None:
        self.__randevuHastaID = randevuHastaID


# Tıbbi Rapor Sınıfı
class TibbiRapor:
    def __init__(self, raporID: int, raporURL: str, raporTarih: str,  raporIcerik: str, raporHastaID: int) -> None:
        self.__raporID = raporID
        self.__raporURL = raporURL
        self.__raporTarih = raporTarih
        self.__raporIcerik = raporIcerik
        self.__raporHastaID = raporHastaID
        print("Tıbbi Rapor")

    # Get/Set Metotları
    # 1-Get Metotları
    def getRaporID(self) -> int:
        return self.__raporID

    def getRaporURL(self) -> str:
        return self.__raporURL

    def getRaporTarih(self) -> str:
        return self.__raporTarih

    def getRaporIcerik(self) -> str:
        return self.__raporIcerik

    def getRaporHastaID(self) -> int:
        return self.__raporHastaID

    # 2-Set Metotları
    def setRaporID(self, raporID: int) -> None:
        self.__raporID = raporID

    def setRaporURL(self, raporURL: str) -> None:
        self.__raporURL = raporURL

    def setRaporTarih(self, raporTarih: str) -> None:
        self.__raporTarih = raporTarih

    def setRaporIcerik(self, raporIcerik: str) -> None:
        self.__raporIcerik = raporIcerik

    def setRaporHastaID(self, raporHastaID: int) -> None:
        self.__raporHastaID = raporHastaID


# İnsan Sınıfı
class Insan(UserMixin):
    def __init__(self, ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str) -> None:
        self.__ad = ad
        self.__soyad = soyad
        self.__dogumTarih = dogumTarih
        self.__cinsiyet = cinsiyet
        self.__telefonNo = telefonNo
        self.__adres = adres

    # Get/Set Metotları
    # 1-Get Metotları
    def getAd(self) -> str:
        return self.__ad

    def getSoyad(self) -> str:
        return self.__soyad

    def getDogumTarih(self) -> str:
        return self.__dogumTarih

    def getCinsiyet(self) -> str:
        return self.__cinsiyet

    def getTelefonNo(self) -> str:
        return self.__telefonNo

    def getAdres(self) -> str:
        return self.__adres

    # 2-Set Metotları
    def setAd(self, ad: str) -> None:
        self.__ad = ad

    def setSoyad(self, soyad: str) -> None:
        self.__soyad = soyad

    def setDogumTarih(self, dogumTarih: str) -> None:
        self.__dogumTarih = dogumTarih

    def setCinsiyet(self, cinsiyet: str) -> None:
        self.__cinsiyet = cinsiyet

    def setTelefonNo(self, telefonNo: str) -> None:
        self.__telefonNo = telefonNo

    def setAdres(self, adres: str) -> None:
        self.__adres = adres


# Hasta Sınıfı
class Hasta(Insan):
    # Ad, Soyad, Doğum Tarihi, Cinsiyet, Telefon, Adres, Sağlık Sigortası, Tc Kimlik No (Hasta ID), Eposta, Parola
    def __init__(self, ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str,
                 saglikSigorta: str, hastaID: int, eposta: str, parola: str) -> None:
        super().__init__(ad, soyad, dogumTarih, cinsiyet, telefonNo, adres)
        self.__hastaID = hastaID
        self.id = self.__hastaID
        self.__saglikSigorta = saglikSigorta
        self.__eposta = eposta
        self.__parola = parola
        self.__sinif = "Hasta"

    # Get/Set Metotları
    # 1-Get Metotları
    def getSinif(self):
        return self.__sinif

    def getHastaID(self) -> int:
        return self.__hastaID

    def getSaglikSigorta(self) -> str:
        return self.__saglikSigorta

    def getEposta(self) -> str:
        return self.__eposta

    def getParola(self) -> str:
        return self.__parola

    # 2-Set Metotları
    def setHastaID(self, hastaID: int) -> None:
        self.__hastaID = hastaID

    def setSaglikSigorta(self, saglikSigorta: str) -> None:
        self.__saglikSigorta = saglikSigorta

    def setEposta(self, eposta: str) -> None:
        self.__eposta = eposta

    def setParola(self, parola: str) -> None:
        self.__parola = parola

    def __str__(self):
        return (f'Hasta ID: {self.getHastaID()}\n'
                f'Parola: {self.getParola()}\n'
                f'İsim: {self.getAd()} {self.getSoyad()}\n'
                f'Eposta: {self.getEposta()}\n'
                f'Telefon: {self.getTelefonNo()}\n'
                f'Sigorta: {self.getSaglikSigorta()}\n'
                f'Adres: {self.getAdres()}\n'
                f'Doğum Tarihi: {self.getDogumTarih()}\n'
                f'Cinsiyet: {self.getCinsiyet()}\n')


# Doktor Sınıfı
class Doktor(Insan):
    def __init__(self, ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str,
                 uzmanlikAlan: str, calisilanHastane: str, doktorID: int, eposta: str, parola: str) -> None:
        super().__init__(ad, soyad, dogumTarih, cinsiyet, telefonNo, adres)
        self.__doktorID = doktorID
        self.id = self.__doktorID
        self.__uzmanlikAlan = uzmanlikAlan
        self.__calisilanHastane = calisilanHastane
        self.__parola = parola
        self.__eposta = eposta
        self.__sinif = "Doktor"

    # Get/Set Metotları
    # 1-Get Metotları
    def getSinif(self):
        return self.__sinif

    def getDoktorID(self) -> int:
        return self.__doktorID

    def getUzmanlikAlan(self) -> str:
        return self.__uzmanlikAlan

    def getCalisilanHastane(self) -> str:
        return self.__calisilanHastane

    def getParola(self) -> str:
        return self.__parola

    def getEposta(self) -> str:
        return self.__eposta

    # 2-Set Metotları
    def setDoktorID(self, doktorID: int) -> None:
        self.__doktorID = doktorID

    def setUzmanlikAlan(self, uzmanlikAlan: str) -> None:
        self.__uzmanlikAlan = uzmanlikAlan

    def setCalisilanHastane(self, calisilanHastane: str) -> None:
        self.__calisilanHastane = calisilanHastane

    def setParola(self, parola: str) -> None:
        self.__parola = parola

    def setEposta(self, eposta: str) -> None:
        self.__eposta = eposta

    def __str__(self):
        return (f'Ad: {self.getAd()}\n'
                f'Soyad: {self.getSoyad()}\n'
                f'Doğum Tarihi: {self.getDogumTarih()}\n'
                f'Cinsiyet: {self.getCinsiyet()}\n'
                f'Telefon Numarası: {self.getTelefonNo()}\n'
                f'Adres: {self.getAdres()}\n'
                f'Doktor ID: {self.getDoktorID()}\n'
                f'Uzmanlık Alanı: {self.getUzmanlikAlan()}\n'
                f'Çalışılan Hastane: {self.getCalisilanHastane()}\n'
                f'Parola: {self.getParola()}\n')


# Yönetici Sınıfı
class Yonetici(Insan):
    def __init__(self, ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str,
                 yoneticiID: int, eposta: str, parola: str) -> None:
        super().__init__(ad, soyad, dogumTarih, cinsiyet, telefonNo, adres)
        self.__yoneticiID = yoneticiID
        self.id = self.__yoneticiID
        self.__parola = parola
        self.__eposta = eposta
        self.__sinif = "Yonetici"

    # Get/Set Metotları
    # 1-Get Metotları
    def getSinif(self):
        return self.__sinif

    def getYoneticiID(self) -> int:
        return self.__yoneticiID

    def getParola(self) -> str:
        return self.__parola

    def getEposta(self) -> str:
        return self.__eposta

    # 2-Set Metotları
    def setYoneticiID(self, yoneticiID: int) -> None:
        self.__yoneticiID = yoneticiID

    def setParola(self, parola: str) -> None:
        self.__parola = parola

    def setEposta(self, eposta: str) -> None:
        self.__eposta = eposta

    def __str__(self):
        return (f'Ad: {self.getAd()}\n'
                f'Soyad: {self.getSoyad()}\n'
                f'Doğum Tarihi: {self.getDogumTarih()}\n'
                f'Cinsiyet: {self.getCinsiyet()}\n'
                f'Telefon Numarası: {self.getTelefonNo()}\n'
                f'Adres: {self.getAdres()}\n'
                f'Yönetici ID: {self.getYoneticiID()}\n'
                f'Parola: {self.getParola()}\n')



app = Flask(__name__, template_folder='templates')
tablo_olusma = False  # Sql Tablosu ilk defa oluşturulurken kullanılan kısım

# Login - Logout metotları için gerekenler
app.secret_key = "354122"
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'girisYap'

@login_manager.user_loader
def load_user(user_id):
    hastaBilgi: list = HastaAra(user_id)
    if len(hastaBilgi) > 0:
        hasta = Hasta(*hastaBilgi[0])
        return hasta

    yoneticiBilgi: list = YoneticiAra(user_id)
    if len(yoneticiBilgi) > 0:
        yonetici = Yonetici(*yoneticiBilgi[0])
        return yonetici

    doktorBilgi: list = DoktorAra(user_id)
    if len(doktorBilgi) > 0:
        doktor = Doktor(*doktorBilgi[0])
        return doktor

    return None

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('home'))

@app.route('/')
def home():
    global tablo_olusma
    if not tablo_olusma:
        tablo_olusma = True
        tabloOlustur()
        yoneticileriOlustur()

    return render_template('home.html', title='anasayfa')

@app.route('/about')
def about():
    return render_template('about.html', title='hakkımızda')

@app.route('/yoneticiler')
def yoneticiler():
    return render_template('yoneticiler.html', title='yoneticileriz')


# GirişOl Fonksiyonunda kullanılacak fonksiyonlar
# 1 - Seçilen giriş türüne ait tabloda girilen ID'ye sahip kullanıcı var mı bakar
def kullanici_bilgi_sorgula(girisTur, tcKimlikNo):
    if girisTur == "Yonetici":
        return YoneticiAra(tcKimlikNo)
    elif girisTur == "Doktor":
        return DoktorAra(tcKimlikNo)
    elif girisTur == "Hasta":
        return HastaAra(tcKimlikNo)
    return None

# 2 - Girilen ID'yi kullanarak bulduğu tablodaki bilgilerle nesne oluşturur ve döndürür
def kullanici_olustur(girisTur, bilgiler):
    if girisTur == "Yonetici":
        return Yonetici(*bilgiler)
    elif girisTur == "Doktor":
        return Doktor(*bilgiler)
    elif girisTur == "Hasta":
        return Hasta(*bilgiler)
    return None

# 3 - Girilen bilgilerin hepsi doğruysa uygun sayfanın bağlantı fonksiyonu ismini döndürür
def kullanici_menu_yonlendir(girisTur):
    if girisTur == "Yonetici":
        return "yoneticiMenu"
    elif girisTur == "Doktor":
        return "doktorMenu"
    elif girisTur == "Hasta":
        return "hastaMenu"
    return None

@app.route('/girisYap', methods=['GET', 'POST'])
def girisYap():
    if request.method == 'POST':
        # Form verilerini değişkenlere ata
        girisTur = request.form.get("girisTur")
        tcKimlikNo = request.form.get("tcKimlikNo")
        parola = request.form.get("parola")

        # Değişkenleri kontrol et
        if girisTur == "Secilmemis":
            hata_mesaj = "Giriş Türünü seçiniz!"
            return jsonify({'error': hata_mesaj}), 400

        elif tcKimlikNo == "":
            hata_mesaj = "T.C Kimlik Numarası giriniz!"
            return jsonify({'error': hata_mesaj}), 400

        elif not tcKimlikNo.isdigit():
            hata_mesaj = "T.C Kimlik Numarası sadece sayılardan oluşmalıdır!"
            return jsonify({'error': hata_mesaj}), 400

        elif len(tcKimlikNo) != 11:
            hata_mesaj = "T.C Kimlik Numarasını doğru uzunlukta giriniz!"
            return jsonify({'error': hata_mesaj}), 400

        elif parola == "":
            hata_mesaj = "Parola kısmı boş bırakılamaz!"
            return jsonify({'error': hata_mesaj}), 400

        kullaniciBilgi = kullanici_bilgi_sorgula(girisTur, tcKimlikNo)
        if kullaniciBilgi and len(kullaniciBilgi) > 0:
            bilgiler = kullaniciBilgi[0]
            print(bilgiler)
            *kalan, kullaniciID, kullanici_posta, kullanici_parola = bilgiler
            print(kullaniciID, kullanici_posta, kullanici_parola)
            if check_password_hash(kullanici_parola, parola):  # Girilen şifreyi kontrol et
                kullanici = kullanici_olustur(girisTur, bilgiler)
                logout_user()
                login_user(kullanici)

                return jsonify({'girisTur': girisTur}), 200  # Menüye yönlendir
            else:
                hata_mesaj = "Yanlış parola!"
                return jsonify({'error': hata_mesaj}), 400
        else:
            hata_mesaj = "Böyle bir kayıtlı kullanıcı yok!"
            return jsonify({'error': hata_mesaj}), 400


    return render_template('girisYap.html', title='girisYap')


@app.route('/kayitOl', methods=['GET', 'POST'])
def kayitOl():
    if request.method == 'POST':
        ad = request.form.get('ad')
        soyad = request.form.get('soyad')
        eposta = request.form.get('eposta')
        parola = request.form.get('parola')
        parola_onay = request.form.get('parola_onay')
        cinsiyet = request.form.get('cinsiyet')
        hastaID = request.form.get('hastaID')
        dogumTarih = request.form.get('dogumTarih')
        sigorta = request.form.get('sigorta')
        adres = request.form.get('adres')
        telNo = request.form.get('telefonNo')
        kosulOnayla = request.form.get('kosulOnayla')


        while True:
            if ad == "":
                hata_mesaj = "Ad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in ad):
                hata_mesaj = "Ad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif soyad == "":
                hata_mesaj = "Soyad kısmı boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in soyad):
                hata_mesaj = "Soyad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif eposta == "":
                hata_mesaj = "Eposta kısmı boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola == "":
                hata_mesaj = "Parola kısmı boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola_onay == "":
                hata_mesaj = "Parola Onay kısmı boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola != parola_onay:
                hata_mesaj = "Parolalar eşleşmiyor!"
                return jsonify({'error': hata_mesaj}), 400

            elif cinsiyet == "Secilmemis":
                hata_mesaj = "Cinsiyeti seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif hastaID == "":
                hata_mesaj = "T.C Kimlik Numarası kısmı boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not hastaID.isdigit():
                hata_mesaj = "T.C Kimlik Numarası sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif len(hastaID) != 11:
                hata_mesaj = "T.C Kimlik Numarasını doğru uzunlukta giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif dogumTarih == "":
                hata_mesaj = "Doğum Tarihi Boş Bırakılamaz"
                return jsonify({'error': hata_mesaj}), 400

            elif sigorta == "Secilmemis":
                hata_mesaj = "Sağlık Sigortanızı seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif adres == "":
                hata_mesaj = "Adres boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif telNo == "":
                hata_mesaj = "Telefon Numarası kısmı boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not telNo.isdigit():
                hata_mesaj = "Telefon Numarası sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif len(telNo) != 10:
                hata_mesaj = "Telefon Numarasını doğru uzunlukta giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif kosulOnayla == "Onaysiz":
                hata_mesaj = "Şartlar ve Koşulları onaylayınız!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                # Girilen T.C Kimlik Numarasına sahip hasta var mı kontrol
                hastaBilgiler = HastaAra(hastaID)
                yoneticiBilgiler = YoneticiAra(hastaID)
                doktorBilgiler = DoktorAra(hastaID)
                tarihListe = dogumTarih.split("-")
                dogumTarih = tarihListe[0] + "/" + str(int(tarihListe[1])) + "/" + str(int(tarihListe[2]))

                if len(hastaBilgiler) > 0 or len(yoneticiBilgiler) > 0 or len(doktorBilgiler) > 0:  # Varsa Çalışacak Kısım
                    hata_mesaj = "Bu T.C Kimlik Numarasına sahip biri zaten kayıtlı!"
                    return jsonify({'error': hata_mesaj}), 400

                else:  # Yoksa Çalışacak Kısım
                    hasta = Hasta(ad=ad, soyad=soyad, dogumTarih=dogumTarih, cinsiyet=cinsiyet,
                                           telefonNo=telNo, adres=adres, saglikSigorta=sigorta,
                                           hastaID=hastaID, eposta=eposta, parola=generate_password_hash(parola))
                    HastaEkle(hasta)
                    return jsonify(), 200



    return render_template('kayitOl.html', title='kayitOl')



# Hasta Menüleri
@app.route('/hastaMenu')
@login_required
def hastaMenu():
    # Hasta olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Hasta":
        return redirect(url_for('girisYap'))

    return render_template('hastaMenu.html', title='hastaMenu')


@app.route('/hastaMenu/hastaProfil', methods=['GET', 'POST'])
@login_required
def hastaProfil():
    # Hasta olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Hasta":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':
        durum = request.form.get("durum")
        if durum == "bilgiDegisme":
            return jsonify(), 200

        elif durum == "bilgiİptal":
            current_user_verileri = {
                "ad": current_user.getAd(),
                "soyad": current_user.getSoyad(),
                "eposta": current_user.getEposta(),
                "cinsiyet": current_user.getCinsiyet(),
                "dogumTarih": current_user.getDogumTarih(),
                "sigorta": current_user.getSaglikSigorta(),
                "adres": current_user.getAdres(),
                "telefonNo": current_user.getTelefonNo()
            }
            return jsonify(current_user_verileri), 200

        elif durum == "bilgiGuncelleme":

            ad = request.form.get("ad")
            soyad = request.form.get("soyad")
            eposta = request.form.get("eposta")
            cinsiyet = request.form.get("cinsiyet")
            dogumTarih = request.form.get("dogumTarih")
            sigorta = request.form.get("sigorta")
            adres = request.form.get("adres")
            telefonNo = request.form.get("telefonNo")

            if ad == "":
                hata_mesaj = "Ad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in ad):
                hata_mesaj = "Ad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif soyad == "":
                hata_mesaj = "Soyad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in soyad):
                hata_mesaj = "Soyad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif eposta == "":
                hata_mesaj = "Eposta boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif cinsiyet == "Secilmemis":
                hata_mesaj = "Cinsiyet seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif dogumTarih == "":
                hata_mesaj = "Doğum tarihi seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif sigorta == "Secilmemis":
                hata_mesaj = "Sigorta seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif adres == "":
                hata_mesaj = "Adres boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif telefonNo == "":
                hata_mesaj = "Telefon numarası boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not telefonNo.isdigit():
                hata_mesaj = "Telefon numarası sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif len(telefonNo) != 10:
                hata_mesaj = "Telefon numarası doğru uzunlukta olmalıdır!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                dogumTarih.replace("-", "/")
                HastaBilgiGuncelle(ad, soyad, dogumTarih, cinsiyet, telefonNo, adres, sigorta,
                                                   eposta, current_user.getHastaID())
                current_user.setAd(ad)
                current_user.setSoyad(soyad)
                current_user.setDogumTarih(dogumTarih)
                current_user.setCinsiyet(cinsiyet)
                current_user.setTelefonNo(telefonNo)
                current_user.setAdres(adres)
                current_user.setSaglikSigorta(sigorta)
                current_user.setEposta(eposta)

                return jsonify(), 200

    return render_template('hastaMenuler/hastaProfil.html', title='hastaProfil')


@app.route('/hastaMenu/hastaRandevuMenu', methods=['GET', 'POST'])
@login_required
def hastaRandevuMenu():
    # Hasta olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Hasta":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':

        islem = int(request.form.get('islem'))

        if islem == 0:  # Randevu Menüsüyle bir iş yoksa
            page = int(request.form.get("page"))
            per_page = 10
            offset = (page - 1) * per_page

            conn = connect_db()
            conn.row_factory = sqlite3.Row
            randevular = conn.execute('''SELECT * FROM Randevular 
                                        WHERE hastaID = ? 
                                        ORDER BY randevu_tarih DESC
                                        LIMIT ? 
                                        OFFSET ?''',
                                      (current_user.getHastaID(), per_page, offset)).fetchall()
            conn.close()
            randevu_list = [dict(row) for row in randevular]
            for randevu in randevu_list:
                doktorBilgi: tuple = DoktorAra(randevu.get('doktorID'))[0]
                ad, soyad, *kalan, uzmanlik, sube, doktorID, eposta, parola = doktorBilgi
                randevu['doktor_isim'] = ad + " " + soyad
                randevu['doktor_uzmanlik'] = uzmanlik
                randevu['hastane_sube'] = sube
            return jsonify(randevu_list), 200

        elif islem == 1:  # En baştaki şubelerin yazılması
            con = connect_db()
            cur = con.cursor()

            subeVerileri = cur.execute("SELECT * FROM Hastaneler").fetchall()
            sube_list = {}
            for sube in subeVerileri:
                departmanlar = []
                sube_isim, *kalan = sube
                departman_bilgiler = cur.execute("SELECT * FROM HastaneBilgiler WHERE hastaneSube = ?", (sube_isim,)).fetchall()
                for departman in departman_bilgiler:
                    sube_ad, departman_isim, *kalan = departman
                    departmanlar.append(departman_isim)
                sube_list[sube_isim] = departmanlar

            con.close()
            return jsonify(list(sube_list.keys())), 200

        elif islem == 2:  # Seçilen şubeye göre departman gelmesi

            con = connect_db()
            cur = con.cursor()

            subeVerileri = cur.execute("SELECT * FROM Hastaneler").fetchall()
            sube_list = {}
            for sube in subeVerileri:
                departmanlar = []
                sube_isim, *kalan = sube
                departman_bilgiler = cur.execute("SELECT * FROM HastaneBilgiler WHERE hastaneSube = ?",
                                                 (sube_isim,)).fetchall()
                for departman in departman_bilgiler:
                    sube_ad, departman_isim, *kalan = departman
                    departmanlar.append(departman_isim)
                sube_list[sube_isim] = departmanlar

            con.close()

            sube_secim = request.form.get('sube')
            if sube_secim in sube_list:
                return jsonify(sube_list[sube_secim]), 200
            return jsonify([]), 200

        elif islem == 3:  # Seçilen deparmtana göre doktor gelmesi

            sube = request.form.get('sube')
            departman = request.form.get('department')

            con = connect_db()
            cur = con.cursor()
            departmanDoktorlar = cur.execute('''
                    SELECT doktor_ad, doktor_soyad, doktorID
                    FROM Doktorlar 
                    WHERE doktor_uzmanlikAlan = ? AND doktor_calisilanHastane = ? ORDER BY doktor_ad
                    ''', (departman, sube, )).fetchall()
            doktor_dict = {}
            for doktor in departmanDoktorlar:
                ad, soyad, doktorID, *kalan = doktor
                isim = ad + " " + soyad
                doktor_dict[isim] = doktorID

            return jsonify(doktor_dict)

        elif islem == 4:
            sube = request.form.get('sube')
            uzmanlik = request.form.get('uzmanlik')
            doktor_id = request.form.get('doktorID')
            tarih = request.form.get('tarih')
            saat = request.form.get('saat')

            if sube == "Secilmemis":
                hata_mesaj = "Şube seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif uzmanlik == "Secilmemis":
                hata_mesaj = "Departman seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif doktor_id == "Secilmemis":
                hata_mesaj = "Doktor seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif tarih == "":
                hata_mesaj = "Tarih seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(tarih.split("-")[0]) < 2024:
                hata_mesaj = "Yıl en az 2024 olmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(tarih.split("-")[0]) > 2027:
                hata_mesaj = "Yıl en fazla 2027 olabilir!"
                return jsonify({'error': hata_mesaj}), 400

            elif saat == "":
                hata_mesaj = "Saat seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[1]) % 5 != 0:
                hata_mesaj = "Dakika 5 ve katları şeklinde seçilmelidir!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) < 8:
                hata_mesaj = "Saat Sabah 8'den öncesi için randevu alınamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) > 21:
                hata_mesaj = "Saat Akşam 9'dan sonrası için randevu alınamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) >= 21 and int(saat.split(":")[1]) > 0:
                hata_mesaj = "Saat Akşam 9'dan sonrası için randevu alınamaz!"
                return jsonify({'error': hata_mesaj}), 400

            tarih = tarih.replace("-", "/")
            con = connect_db()
            cur = con.cursor()
            randevular = cur.execute('''
                    SELECT count(*)
                    FROM Randevular 
                    WHERE 
                    randevu_tarih = ? AND randevu_saat = ? 
                    AND (hastaID = ? OR doktorID = ?)''', (tarih, saat, current_user.getHastaID(), doktor_id,)).fetchall()

            randevu_sayi, *kalan = randevular[0]
            if int(randevu_sayi) > 0:
                con.commit()
                con.close()
                hata_mesaj = "Girilen tarih ve saat dolu başka tarih ve saati deneyin!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                toplamRandevuSayi, *kalan = cur.execute("SELECT MAX(randevuID) FROM Randevular").fetchall()[0]
                if toplamRandevuSayi is None:
                    toplamRandevuSayi = 0
                randevu_id = int(toplamRandevuSayi) + 1
                randevu = Randevu(randevu_id, doktor_id, current_user.getHastaID(), tarih, saat)
                RandevuEkle(randevu)
                con.commit()
                con.close()
                return jsonify(), 200
        elif islem == 5:
            randevuID = request.form.get('randevuID')

            if randevuID == "":
                hata_mesaj = "RandevuID giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                con = connect_db()
                cur = con.cursor()
                randevuVeriler = cur.execute("SELECT * FROM Randevular WHERE hastaID = ? AND randevuID = ?",
                                             (current_user.getHastaID(), randevuID, )).fetchall()
                if len(randevuVeriler) == 0:
                    hata_mesaj = "Böyle bir randevuya sahip değilsiniz!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    cur.execute("DELETE FROM Randevular WHERE hastaID = ? AND randevuID = ?",
                                (current_user.getHastaID(), randevuID, ))
                    con.commit()
                    con.close()
                    return jsonify(), 200

        elif islem == 6:
            randevuID = request.form.get('randevuID')
            saat = request.form.get('saat')
            tarih = request.form.get('tarih')

            if randevuID == "":
                hata_mesaj = "RandevuID giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            elif tarih == "":
                hata_mesaj = "Tarih seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(tarih.split("-")[0]) < 2024:
                hata_mesaj = "Yıl en az 2024 olmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(tarih.split("-")[0]) > 2027:
                hata_mesaj = "Yıl en fazla 2027 olabilir!"
                return jsonify({'error': hata_mesaj}), 400

            elif saat == "":
                hata_mesaj = "Saat seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[1]) % 5 != 0:
                hata_mesaj = "Dakika 5 ve katları şeklinde seçilmelidir!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) < 8:
                hata_mesaj = "Saat Sabah 8'den öncesi için randevu ayarlanamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) > 21:
                hata_mesaj = "Saat Akşam 9'dan sonrası için randevu ayarlanamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) >= 21 and int(saat.split(":")[1]) > 0:
                hata_mesaj = "Saat Akşam 9'dan sonrası için randevu ayarlanamaz!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                tarih = tarih.replace("-", "/")
                con = connect_db()
                cur = con.cursor()
                randevuVeriler = cur.execute("SELECT * FROM Randevular WHERE hastaID = ? AND randevuID = ?",
                                             (current_user.getHastaID(), randevuID,)).fetchall()

                if len(randevuVeriler) == 0:
                    hata_mesaj = "Böyle bir randevuya sahip değilsiniz!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400
                else:

                    randevu_id, doktor_id, hasta_id, *kalan = randevuVeriler[0]
                    hastaVeriler = cur.execute('''
                    SELECT * 
                    FROM Randevular 
                    WHERE hastaID = ? AND randevu_saat = ? AND randevu_tarih = ? ''',
                                               (hasta_id, saat, tarih,)).fetchall()

                    doktorVeriler = cur.execute('''
                    SELECT * 
                    FROM Randevular 
                    WHERE doktorID = ? AND randevu_saat = ? AND randevu_tarih = ? ''',
                                                (doktor_id, saat, tarih,)).fetchall()

                    if len(hastaVeriler) > 0:
                        hata_mesaj = "O tarih ve saatte başka bir randevunuz var!"
                        con.commit()
                        con.close()
                        return jsonify({'error': hata_mesaj}), 400

                    elif len(doktorVeriler) > 0:
                        hata_mesaj = "Doktorun o tarih ve saatte başka bir randevunuz var!"
                        con.commit()
                        con.close()
                        return jsonify({'error': hata_mesaj}), 400

                    else:
                        cur.execute('''UPDATE Randevular 
                                        SET randevu_tarih = ?, randevu_saat = ?
                                         WHERE hastaID = ? AND randevuID = ?''',
                                    (tarih, saat, hasta_id, randevuID,))
                        con.commit()
                        con.close()
                        return jsonify(), 200


    return render_template('hastaMenuler/hastaRandevuMenu.html', title='hastaRandevuMenu')


@app.route('/hastaMenu/hastaRaporMenu', methods=['GET', 'POST'])
@login_required
def hastaRaporMenu():
    # Hasta olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Hasta":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':
        islem = request.form.get("islem")
        if islem == "0":
            hastaID = current_user.getHastaID()
            page = int(request.form.get("page"))
            per_page = 10
            offset = (page - 1) * per_page

            conn = connect_db()
            conn.row_factory = sqlite3.Row
            raporlar = conn.execute('''SELECT * FROM Raporlar 
                                                    WHERE hastaID = ? 
                                                    ORDER BY rapor_tarih DESC
                                                    LIMIT ? 
                                                    OFFSET ?''',
                                    (hastaID, per_page, offset)).fetchall()
            conn.close()

            rapor_list = [dict(row) for row in raporlar]
            return jsonify(rapor_list), 200


    return render_template('hastaMenuler/hastaRaporMenu.html', title='hastaRaporMenu')


# Doktor Menüleri
@app.route('/doktorMenu', methods=['GET', 'POST'])
@login_required
def doktorMenu():
    # Doktor olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Doktor":
        return redirect(url_for('girisYap'))

    return render_template('doktorMenu.html', title='doktorMenu')


@app.route('/doktorMenu/doktorProfil', methods=['GET', 'POST'])
@login_required
def doktorProfil():
    # Doktor olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Doktor":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':
        durum = request.form.get("durum")
        if durum == "bilgiDegisme":
            return jsonify(), 200

        elif durum == "bilgiİptal":
            current_user_verileri = {
                "ad": current_user.getAd(),
                "soyad": current_user.getSoyad(),
                "eposta": current_user.getEposta(),
                "cinsiyet": current_user.getCinsiyet(),
                "dogumTarih": current_user.getDogumTarih(),
                "uzmanlik": current_user.getUzmanlikAlan(),
                "sube": current_user.getCalisilanHastane(),
                "adres": current_user.getAdres(),
                "telefonNo": current_user.getTelefonNo()
            }
            return jsonify(current_user_verileri), 200

        elif durum == "bilgiGuncelleme":

            ad = request.form.get("ad")
            soyad = request.form.get("soyad")
            eposta = request.form.get("eposta")
            cinsiyet = request.form.get("cinsiyet")
            dogumTarih = request.form.get("dogumTarih")
            adres = request.form.get("adres")
            telefonNo = request.form.get("telefonNo")

            if ad == "":
                hata_mesaj = "Ad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in ad):
                hata_mesaj = "Ad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif soyad == "":
                hata_mesaj = "Soyad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in soyad):
                hata_mesaj = "Soyad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif eposta == "":
                hata_mesaj = "Eposta boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif cinsiyet == "Secilmemis":
                hata_mesaj = "Cinsiyet seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif dogumTarih == "":
                hata_mesaj = "Doğum tarihi seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif adres == "":
                hata_mesaj = "Adres boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif telefonNo == "":
                hata_mesaj = "Telefon numarası boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not telefonNo.isdigit():
                hata_mesaj = "Telefon numarası sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif len(telefonNo) != 10:
                hata_mesaj = "Telefon numarası doğru uzunlukta olmalıdır!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                dogumTarih = dogumTarih.replace("-", "/")
                DoktorBilgiGuncelle(ad, soyad, dogumTarih, cinsiyet, telefonNo, adres, eposta, current_user.getDoktorID())
                current_user.setAd(ad)
                current_user.setSoyad(soyad)
                current_user.setDogumTarih(dogumTarih)
                current_user.setCinsiyet(cinsiyet)
                current_user.setTelefonNo(telefonNo)
                current_user.setAdres(adres)
                current_user.setEposta(eposta)

                return jsonify(), 200

    return render_template('doktorMenuler/doktorProfil.html', title='doktorProfil')


@app.route('/doktorMenu/doktorHastaMenu', methods=['GET', 'POST'])
@login_required
def doktorHastaMenu():
    # Doktor olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Doktor":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':

        islem = int(request.form.get('islem'))
        if islem == 0:  # Randevu Menüsüyle bir iş yoksa
            page = int(request.form.get("page"))
            per_page = 10
            offset = (page - 1) * per_page
            conn = connect_db()
            conn.row_factory = sqlite3.Row
            hastaBilgiler = conn.execute('''SELECT Randevular.hastaID FROM Randevular, Hastalar 
                                        WHERE doktorID = ? AND Randevular.hastaID = Hastalar.hastaID 
                                        ORDER BY Hastalar.hasta_dogumTarih DESC
                                        LIMIT ? 
                                        OFFSET ?''',
                                         (current_user.getDoktorID(), per_page, offset)).fetchall()
            conn.close()
            hastaList = [dict(row) for row in hastaBilgiler]
            for hasta in hastaList:
                hastaBilgi: tuple = HastaAra(hasta.get('hastaID'))[0]
                ad, soyad, dogumTarih, cinsiyet, telefon, adres, sigorta, *kalan = hastaBilgi
                hasta['isim'] = ad + " " + soyad
                hasta['dogumTarih'] = dogumTarih
                hasta['cinsiyet'] = cinsiyet
                hasta['telefon'] = telefon
                hasta['adres'] = adres
                hasta['sigorta'] = sigorta + " Sigorta"
            return jsonify(hastaList), 200

    return render_template('doktorMenuler/doktorHastaMenu.html', title='doktorHastaMenu')


@app.route('/doktorMenu/doktorRandevuMenu', methods=['GET', 'POST'])
@login_required
def doktorRandevuMenu():
    # Doktor olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Doktor":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':

        islem = int(request.form.get('islem'))
        if islem == 0:  # Randevu Menüsüyle bir iş yoksa
            page = int(request.form.get("page"))
            per_page = 10
            offset = (page - 1) * per_page

            conn = connect_db()
            conn.row_factory = sqlite3.Row
            randevular = conn.execute('''SELECT * FROM Randevular 
                                                WHERE doktorID = ? 
                                                ORDER BY randevu_tarih DESC
                                                LIMIT ? 
                                                OFFSET ?''',
                                      (current_user.getDoktorID(), per_page, offset)).fetchall()
            conn.close()
            randevu_list = [dict(row) for row in randevular]
            for randevu in randevu_list:
                hastaBilgi: tuple = HastaAra(randevu.get('hastaID'))[0]
                ad, soyad, cinsiyet, telefon, sigorta, *kalan = hastaBilgi
                randevu['hasta_isim'] = ad + " " + soyad
                randevu['doktorID'] = current_user.getDoktorID()
                randevu['doktor_uzmanlik'] = current_user.getUzmanlikAlan()
                randevu['hastane_sube'] = current_user.getCalisilanHastane()
            return jsonify(randevu_list), 200

        elif islem == 1:
            randevuID = request.form.get('randevuID')

            if randevuID == "":
                hata_mesaj = "RandevuID giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                con = connect_db()
                cur = con.cursor()
                randevuVeriler = cur.execute("SELECT * FROM Randevular WHERE doktorID = ? AND randevuID = ?",
                                             (current_user.getDoktorID(), randevuID,)).fetchall()
                if len(randevuVeriler) == 0:
                    hata_mesaj = "Böyle bir randevuya sahip değilsiniz!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    cur.execute("DELETE FROM Randevular WHERE doktorID = ? AND randevuID = ?",
                                (current_user.getDoktorID(), randevuID,))
                    con.commit()
                    con.close()
                    return jsonify(), 200

        elif islem == 2:
            randevuID = request.form.get('randevuID')
            saat = request.form.get('saat')
            tarih = request.form.get('tarih')

            if randevuID == "":
                hata_mesaj = "RandevuID giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            elif tarih == "":
                hata_mesaj = "Tarih seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(tarih.split("-")[0]) < 2024:
                hata_mesaj = "Yıl en az 2024 olmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(tarih.split("-")[0]) > 2027:
                hata_mesaj = "Yıl en fazla 2027 olabilir!"
                return jsonify({'error': hata_mesaj}), 400

            elif saat == "":
                hata_mesaj = "Saat seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[1]) % 5 != 0:
                hata_mesaj = "Dakika 5 ve katları şeklinde seçilmelidir!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) < 8:
                hata_mesaj = "Saat Sabah 8'den öncesi için randevu ayarlanamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) > 21:
                hata_mesaj = "Saat Akşam 9'dan sonrası için randevu ayarlanamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) >= 21 and int(saat.split(":")[1]) > 0:
                hata_mesaj = "Saat Akşam 9'dan sonrası için randevu ayarlanamaz!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                tarih = tarih.replace("-", "/")
                con = connect_db()
                cur = con.cursor()
                randevuVeriler = cur.execute("SELECT * FROM Randevular WHERE doktorID = ? AND randevuID = ?",
                                             (current_user.getDoktorID(), randevuID,)).fetchall()

                if len(randevuVeriler) == 0:
                    hata_mesaj = "Böyle bir randevuya sahip değilsiniz!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400
                else:

                    randevu_id, doktor_id, hasta_id, *kalan = randevuVeriler[0]
                    hastaVeriler = cur.execute('''
                    SELECT * 
                    FROM Randevular 
                    WHERE hastaID = ? AND randevu_saat = ? AND randevu_tarih = ? ''',
                                               (hasta_id, saat, tarih,)).fetchall()

                    doktorVeriler = cur.execute('''
                    SELECT * 
                    FROM Randevular 
                    WHERE doktorID = ? AND randevu_saat = ? AND randevu_tarih = ? ''',
                                                (doktor_id, saat, tarih,)).fetchall()

                    if len(hastaVeriler) > 0:
                        hata_mesaj = "Hastanın o tarih ve saatte başka bir randevusu var!"
                        con.commit()
                        con.close()
                        return jsonify({'error': hata_mesaj}), 400

                    elif len(doktorVeriler) > 0:
                        hata_mesaj = "O tarih ve saatte başka bir randevunuz var!"
                        con.commit()
                        con.close()
                        return jsonify({'error': hata_mesaj}), 400

                    else:
                        cur.execute('''UPDATE Randevular 
                                        SET randevu_tarih = ?, randevu_saat = ?
                                         WHERE doktorID = ? AND randevuID = ?''',
                                    (tarih, saat, current_user.getDoktorID(), randevuID,))
                        con.commit()
                        con.close()
                        return jsonify(), 200

    return render_template('doktorMenuler/doktorRandevuMenu.html', title='doktorRandevuMenu')


@app.route('/doktorMenu/doktorRaporMenu', methods=['GET', 'POST'])
@login_required
def doktorRaporMenu():
    # Doktor olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Doktor":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':
        islem = request.form.get("islem")
        if islem == "0":
            doktorID = current_user.getDoktorID()
            page = int(request.form.get("page"))
            per_page = 10
            offset = (page - 1) * per_page

            conn = connect_db()
            conn.row_factory = sqlite3.Row
            raporlar = conn.execute('''
                    SELECT rap.raporID, rap.hastaID, rap.rapor_tarih, rap.rapor_icerik, rap.raporURL
                    FROM Raporlar AS rap, Randevular 
                    WHERE rap.hastaID = Randevular.hastaID AND Randevular.doktorID = ?
                    ORDER BY rap.rapor_tarih DESC
                    LIMIT ? 
                    OFFSET ?''',
                    (doktorID, per_page, offset)).fetchall()
            conn.close()

            rapor_list = [dict(row) for row in raporlar]
            for rapor in rapor_list:
                hastaBilgi: tuple = HastaAra(rapor.get('hastaID'))[0]
                ad, soyad, *kalan = hastaBilgi
                rapor['hasta_isim'] = ad + " " + soyad
            return jsonify(rapor_list), 200

        elif islem == "1":
            raporID = request.form.get('raporID')
            doktorID = current_user.getDoktorID()
            if raporID == "":
                hata_mesaj = "RaporID giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                con = connect_db()
                cur = con.cursor()
                raporVeriler = cur.execute(
                    '''
                    SELECT * 
                    FROM Raporlar AS rap, Randevular AS ran
                    WHERE rap.raporID = ? AND rap.hastaID = ran.hastaID AND ran.doktorID = ?
                    ''', (raporID, doktorID,)).fetchall()

                if len(raporVeriler) == 0:
                    hata_mesaj = "Bu rapor sizin hastalarınıza ait değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400

                else:
                    cur.execute("DELETE FROM Raporlar WHERE raporID = ?", (raporID,))
                    con.commit()
                    con.close()
                    return jsonify(), 200

        elif islem == "2":
            doktorID = current_user.getDoktorID()
            raporID = request.form.get('raporID')
            hastaID = request.form.get('hastaID')
            tarih = request.form.get('raporTarih')
            raporIcerik = request.form.get('raporIcerik')
            raporURL = request.form.get('raporURL')

            if raporID == "":
                hata_mesaj = "RaporID giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not raporID.isdigit():
                hata_mesaj = "RaporID sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif hastaID == "":
                hata_mesaj = "HastaID giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not hastaID.isdigit():
                hata_mesaj = "HastaID sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif tarih == "":
                hata_mesaj = "Tarih giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif raporIcerik == "":
                hata_mesaj = "Rapor içeriği giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif raporURL == "":
                hata_mesaj = "RaporURL giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                con = connect_db()
                cur = con.cursor()
                raporVeriler = cur.execute(
                    '''
                    SELECT * 
                    FROM Raporlar AS rap, Randevular AS ran
                    WHERE rap.raporID = ? AND rap.hastaID = ran.hastaID AND ran.doktorID = ?
                    ''', (raporID, doktorID,)).fetchall()

                randevuVeriler = cur.execute(
                    '''
                    SELECT * 
                    FROM Randevular AS ran
                    WHERE  ran.hastaID = ? AND ran.doktorID = ?
                    ''', (hastaID, doktorID,)).fetchall()

                raporBilgi = RaporAra(raporID)

                if len(raporVeriler) == 0:
                    hata_mesaj = "Bu rapor sizin hastalarınıza ait değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400

                elif len(randevuVeriler) == 0:
                    hata_mesaj = "Girilen HastaID'ye sahip kişi sizin hastalarınzıdan değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400

                elif len(raporBilgi) == 0:
                    hata_mesaj = "Girilen RaporID'ye ait bir rapor mevcut değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400

                else:
                    tarih = tarih.replace("-", "/")
                    RaporBilgisiGuncelle(raporID, raporURL, tarih, raporIcerik, hastaID)
                    con.commit()
                    con.close()
                    return jsonify(), 200

        elif islem == "3":
            doktorID = current_user.getDoktorID()
            hastaID = request.form.get('hastaID')
            tarih = request.form.get('raporTarih')
            raporIcerik = request.form.get('raporIcerik')
            raporURL = request.form.get('raporURL')

            if hastaID == "":
                hata_mesaj = "HastaID giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not hastaID.isdigit():
                hata_mesaj = "HastaID sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif tarih == "":
                hata_mesaj = "Tarih giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif raporIcerik == "":
                hata_mesaj = "Rapor içeriği giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif raporURL == "":
                hata_mesaj = "RaporURL giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                con = connect_db()
                cur = con.cursor()
                hastaBilgiler = cur.execute(
                    '''
                    SELECT * 
                    FROM Hastalar
                    WHERE hastaID = ? 
                    ''', (hastaID, )).fetchall()

                randevuVeriler = cur.execute(
                    '''
                    SELECT * 
                    FROM Randevular AS ran
                    WHERE  ran.hastaID = ? AND ran.doktorID = ?
                    ''', (hastaID, doktorID,)).fetchall()

                if len(randevuVeriler) == 0:
                    hata_mesaj = "Girilen HastaID'ye sahip kişi sizin hastalarınzıdan değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400

                else:
                    tarih = tarih.replace("-", "/")

                    cur.execute("SELECT MAX(raporID) FROM Raporlar")
                    raporBilgiler = cur.fetchall()
                    raporID, *kalan = raporBilgiler[0]
                    if raporID is None:
                        raporID = 0
                    raporID += 1

                    rapor = TibbiRapor(raporID, raporURL, tarih, raporIcerik, hastaID)
                    RaporEkle(rapor)
                    con.commit()
                    con.close()
                    return jsonify(), 200




    return render_template('doktorMenuler/doktorRaporMenu.html', title='doktorRaporMenu')

# Yönetici Menüleri
@app.route('/yoneticiMenu', methods=['GET', 'POST'])
@login_required
def yoneticiMenu():
    # Yönetici olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Yonetici":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':
        page = int(request.form.get("page"))

        per_page = 10
        offset = (page - 1) * per_page

        conn = connect_db()
        conn.row_factory = sqlite3.Row
        randevular = conn.execute('SELECT * FROM Randevular LIMIT ? OFFSET ?', (per_page, offset)).fetchall()
        conn.close()

        randevu_list = [dict(row) for row in randevular]
        print(randevu_list)
        return jsonify(randevu_list), 200

    # Render template only on GET requests
    return render_template('yoneticiMenu.html', title='yoneticiMenu')



@app.route('/yoneticiMenu/yoneticiHastaMenu', methods=['GET', 'POST'])
@login_required
def yoneticiHastaMenu():
    # Yönetici olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Yonetici":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':

        islem = int(request.form.get('islem'))
        if islem == 0:  # Randevu Menüsüyle bir iş yoksa
            page = int(request.form.get("page"))
            per_page = 10
            offset = (page - 1) * per_page
            conn = connect_db()
            conn.row_factory = sqlite3.Row
            hastaBilgiler = conn.execute('''SELECT hastaID FROM Hastalar 
                                        ORDER BY Hastalar.hasta_dogumTarih DESC
                                        LIMIT ? 
                                        OFFSET ?''',
                                         (per_page, offset,)).fetchall()
            conn.close()
            hastaList = [dict(row) for row in hastaBilgiler]
            for hasta in hastaList:
                hastaBilgi: tuple = HastaAra(hasta.get('hastaID'))[0]
                ad, soyad, dogumTarih, cinsiyet, telefon, adres, sigorta, *kalan = hastaBilgi
                hasta['isim'] = ad + " " + soyad
                hasta['dogumTarih'] = dogumTarih
                hasta['cinsiyet'] = cinsiyet
                hasta['telefon'] = telefon
                hasta['adres'] = adres
                hasta['sigorta'] = sigorta + " Sigorta"
            return jsonify(hastaList), 200

        elif islem == 1:  # Hasta Ekleme
            hastaID = request.form.get('hastaID')
            ad = request.form.get('ad')
            soyad = request.form.get('soyad')
            eposta = request.form.get('eposta')
            parola = request.form.get('parola')
            parola_onay = request.form.get('parola_onay')
            cinsiyet = request.form.get('cinsiyet')
            sigorta = request.form.get('sigorta')
            dogumTarih = request.form.get('dogumTarih')
            adres = request.form.get('adres')
            telefonNo = request.form.get('telefonNo')

            if hastaID == "":
                hata_mesaj = "T.C Kimlik No boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not hastaID.isdigit():
                hata_mesaj = "T.C Kimlik No sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif ad == "":
                hata_mesaj = "Ad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in ad):
                hata_mesaj = "Ad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif soyad == "":
                hata_mesaj = "Soyad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in soyad):
                hata_mesaj = "Soyad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif eposta == "":
                hata_mesaj = "Eposta boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola == "":
                hata_mesaj = "Parola boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not parola.isdigit():
                hata_mesaj = "Parola sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola_onay == "":
                hata_mesaj = "Parola Onay boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not parola.isdigit():
                hata_mesaj = "Parola Onay sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(parola) != int(parola_onay):
                hata_mesaj = "Parolalar eşleşmiyor!"
                return jsonify({'error': hata_mesaj}), 400

            elif cinsiyet == "Secilmemis":
                hata_mesaj = "Cinsiyet seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif sigorta == "Secilmemis":
                hata_mesaj = "Sigorta seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif dogumTarih == "":
                hata_mesaj = "Doğum tarihi seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif adres == "":
                hata_mesaj = "Adres boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif telefonNo == "":
                hata_mesaj = "Telefon numarası boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not telefonNo.isdigit():
                hata_mesaj = "Telefon numarası sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif len(telefonNo) != 10:
                hata_mesaj = "Telefon numarası doğru uzunlukta olmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                hastaBilgi = HastaAra(hastaID)
                if len(hastaBilgi) > 0:
                    hata_mesaj = "Bu T.C Kimlik No'ya sahip bir hasta bulunmakta!"
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    tarihListe = dogumTarih.split("-")
                    dogumTarih = tarihListe[0] + "/" + str(int(tarihListe[1])) + "/" + str(int(tarihListe[2]))
                    con = connect_db()
                    cur = con.cursor()

                    hasta = Hasta(ad, soyad, dogumTarih, cinsiyet, telefonNo,
                                           adres, sigorta, hastaID, eposta, generate_password_hash(parola))
                    HastaEkle(hasta)

                    con.commit()  # Değişiklikleri kaydet
                    con.close()  # Bağlantıyı kapat
                    return jsonify(), 200

        elif islem == 2:  # Silme işlemi
            hastaID = request.form.get('hastaID')

            if hastaID == "":
                hata_mesaj = "HastaID giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                con = connect_db()
                cur = con.cursor()
                randevuVeriler = cur.execute("SELECT * FROM Hastalar WHERE hastaID = ?",
                                             (hastaID,)).fetchall()
                if len(randevuVeriler) == 0:
                    hata_mesaj = "Böyle bir hasta mevcut değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    HastaSil(hastaID)
                    con.commit()
                    con.close()
                    return jsonify(), 200
        elif islem == 3:  # Hasta Bilgi Güncellemesi
            hastaID = request.form.get('hastaID')
            ad = request.form.get('ad')
            soyad = request.form.get('soyad')
            eposta = request.form.get('eposta')
            parola = request.form.get('parola')
            parola_onay = request.form.get('parola_onay')
            cinsiyet = request.form.get('cinsiyet')
            sigorta = request.form.get('sigorta')
            dogumTarih = request.form.get('dogumTarih')
            adres = request.form.get('adres')
            telefonNo = request.form.get('telefonNo')

            if hastaID == "":
                hata_mesaj = "T.C Kimlik No boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not hastaID.isdigit():
                hata_mesaj = "T.C Kimlik No sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif ad == "":
                hata_mesaj = "Ad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in ad):
                hata_mesaj = "Ad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif soyad == "":
                hata_mesaj = "Soyad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in soyad):
                hata_mesaj = "Soyad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif eposta == "":
                hata_mesaj = "Eposta boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola == "":
                hata_mesaj = "Parola boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not parola.isdigit():
                hata_mesaj = "Parola sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola_onay == "":
                hata_mesaj = "Parola Onay boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not parola.isdigit():
                hata_mesaj = "Parola Onay sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(parola) != int(parola_onay):
                hata_mesaj = "Parolalar eşleşmiyor!"
                return jsonify({'error': hata_mesaj}), 400

            elif cinsiyet == "Secilmemis":
                hata_mesaj = "Cinsiyet seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif sigorta == "Secilmemis":
                hata_mesaj = "Sigorta seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif dogumTarih == "":
                hata_mesaj = "Doğum tarihi seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif adres == "":
                hata_mesaj = "Adres boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif telefonNo == "":
                hata_mesaj = "Telefon numarası boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not telefonNo.isdigit():
                hata_mesaj = "Telefon numarası sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif len(telefonNo) != 10:
                hata_mesaj = "Telefon numarası doğru uzunlukta olmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                hastaBilgi = HastaAra(hastaID)
                if len(hastaBilgi) == 0:
                    hata_mesaj = "Bu T.C Kimlik No'ya sahip bir hasta bulunmamakta!"
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    tarihListe = dogumTarih.split("-")
                    dogumTarih = tarihListe[0] + "/" + str(int(tarihListe[1])) + "/" + str(int(tarihListe[2]))
                    con = connect_db()
                    cur = con.cursor()

                    guncelVeriler = [ad, soyad, dogumTarih, cinsiyet, telefonNo, adres, sigorta, eposta,
                                     generate_password_hash(parola), hastaID,]
                    cur.execute('''
                    UPDATE Hastalar 
                    SET hasta_ad = ?, hasta_soyad = ?, hasta_dogumTarih = ?, hasta_cinsiyet = ?,
                    hasta_telefon = ?, hasta_adres = ?, hasta_saglikSigorta = ?, hasta_eposta = ?, hasta_parola = ?
                    WHERE hastaID = ?''', guncelVeriler)

                    con.commit()  # Değişiklikleri kaydet
                    con.close()  # Bağlantıyı kapat
                    return jsonify(), 200


    return render_template('yoneticiMenuler/yoneticiHastaMenu.html', title='yoneticiHastaMenu')


@app.route('/yoneticiMenu/yoneticiDoktorMenu', methods=['GET', 'POST'])
@login_required
def yoneticiDoktorMenu():
    # Yönetici olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Yonetici":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':

        islem = int(request.form.get('islem'))
        if islem == 0:  # Randevu Menüsüyle bir iş yoksa
            page = int(request.form.get("page"))
            per_page = 10
            offset = (page - 1) * per_page
            conn = connect_db()
            conn.row_factory = sqlite3.Row
            doktorBilgiler = conn.execute('''SELECT doktorID FROM Doktorlar 
                                        ORDER BY Doktorlar.doktor_dogumTarih DESC
                                        LIMIT ? 
                                        OFFSET ?''',
                                          (per_page, offset,)).fetchall()
            conn.close()
            doktorList = [dict(row) for row in doktorBilgiler]
            for doktor in doktorList:
                doktorBilgi: tuple = DoktorAra(doktor.get('doktorID'))[0]
                ad, soyad, dogumTarih, cinsiyet, telefon, adres, uzmanlik, sube, *kalan = doktorBilgi
                doktor['isim'] = ad + " " + soyad
                doktor['dogumTarih'] = dogumTarih
                doktor['cinsiyet'] = cinsiyet
                doktor['telefon'] = telefon
                doktor['adres'] = adres
                doktor['uzmanlik'] = uzmanlik
                doktor['sube'] = sube
            return jsonify(doktorList), 200

        elif islem == 10:  # En baştaki şubelerin yazılması
            con = connect_db()
            cur = con.cursor()

            subeVerileri = cur.execute("SELECT * FROM Hastaneler").fetchall()
            sube_list = {}
            for sube in subeVerileri:
                departmanlar = []
                sube_isim, *kalan = sube
                departman_bilgiler = cur.execute("SELECT * FROM HastaneBilgiler WHERE hastaneSube = ?",
                                                 (sube_isim,)).fetchall()
                for departman in departman_bilgiler:
                    sube_ad, departman_isim, *kalan = departman
                    departmanlar.append(departman_isim)
                sube_list[sube_isim] = departmanlar

            con.close()
            return jsonify(list(sube_list.keys())), 200

        elif islem == 11:  # Seçilen şubeye göre departman gelmesi

            con = connect_db()
            cur = con.cursor()

            subeVerileri = cur.execute("SELECT * FROM Hastaneler").fetchall()
            sube_list = {}
            for sube in subeVerileri:
                departmanlar = []
                sube_isim, *kalan = sube
                departman_bilgiler = cur.execute("SELECT * FROM HastaneBilgiler WHERE hastaneSube = ?",
                                                 (sube_isim,)).fetchall()
                for departman in departman_bilgiler:
                    sube_ad, departman_isim, *kalan = departman
                    departmanlar.append(departman_isim)
                sube_list[sube_isim] = departmanlar

            con.close()

            sube_secim = request.form.get('sube')
            if sube_secim in sube_list:
                return jsonify(sube_list[sube_secim]), 200
            return jsonify([]), 200

        elif islem == 1:  # Doktor Ekleme
            doktorID = request.form.get('doktorID')
            ad = request.form.get('ad')
            soyad = request.form.get('soyad')
            eposta = request.form.get('eposta')
            parola = request.form.get('parola')
            parola_onay = request.form.get('parola_onay')
            cinsiyet = request.form.get('cinsiyet')
            sube = request.form.get('sube')
            uzmanlik = request.form.get('uzmanlik')
            dogumTarih = request.form.get('dogumTarih')
            adres = request.form.get('adres')
            telefonNo = request.form.get('telefonNo')

            if doktorID == "":
                hata_mesaj = "T.C Kimlik No boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not doktorID.isdigit():
                hata_mesaj = "T.C Kimlik No sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif ad == "":
                hata_mesaj = "Ad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in ad):
                hata_mesaj = "Ad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif soyad == "":
                hata_mesaj = "Soyad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in soyad):
                hata_mesaj = "Soyad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif eposta == "":
                hata_mesaj = "Eposta boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola == "":
                hata_mesaj = "Parola boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not parola.isdigit():
                hata_mesaj = "Parola sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola_onay == "":
                hata_mesaj = "Parola Onay boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not parola.isdigit():
                hata_mesaj = "Parola Onay sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(parola) != int(parola_onay):
                hata_mesaj = "Parolalar eşleşmiyor!"
                return jsonify({'error': hata_mesaj}), 400

            elif cinsiyet == "Secilmemis":
                hata_mesaj = "Cinsiyet seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif sube == "Secilmemis":
                hata_mesaj = "Şube seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif uzmanlik == "Secilmemis":
                hata_mesaj = "Departman Adı seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif dogumTarih == "":
                hata_mesaj = "Doğum tarihi seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif adres == "":
                hata_mesaj = "Adres boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif telefonNo == "":
                hata_mesaj = "Telefon numarası boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not telefonNo.isdigit():
                hata_mesaj = "Telefon numarası sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif len(telefonNo) != 10:
                hata_mesaj = "Telefon numarası doğru uzunlukta olmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                doktorBilgi = DoktorAra(doktorID)
                if len(doktorBilgi) > 0:
                    hata_mesaj = "Bu T.C Kimlik No'ya sahip bir doktor bulunmakta!"
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    tarihListe = dogumTarih.split("-")
                    dogumTarih = tarihListe[0] + "/" + str(int(tarihListe[1])) + "/" + str(int(tarihListe[2]))
                    con = connect_db()
                    cur = con.cursor()
                    doktor = Doktor(ad, soyad, dogumTarih, cinsiyet, telefonNo, adres,
                                             uzmanlik, sube, doktorID, eposta, generate_password_hash(parola))

                    DoktorEkle(doktor)

                    con.commit()  # Değişiklikleri kaydet
                    con.close()  # Bağlantıyı kapat
                    return jsonify(), 200

        elif islem == 2:  # Silme işlemi
            doktorID = request.form.get('doktorID')

            if doktorID == "":
                hata_mesaj = "T.C Kimlik No giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                con = connect_db()
                cur = con.cursor()
                doktorVeriler = cur.execute("SELECT * FROM Doktorlar WHERE doktorID = ?",
                                            (doktorID,)).fetchall()
                if len(doktorVeriler) == 0:
                    hata_mesaj = "Böyle bir doktor mevcut değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    DoktorSil(doktorID)
                    con.commit()
                    con.close()
                    return jsonify(), 200

        elif islem == 3:  # Doktor Bilgi Güncellemesi
            doktorID = request.form.get('doktorID')
            ad = request.form.get('ad')
            soyad = request.form.get('soyad')
            eposta = request.form.get('eposta')
            parola = request.form.get('parola')
            parola_onay = request.form.get('parola_onay')
            cinsiyet = request.form.get('cinsiyet')
            sube = request.form.get('sube')
            uzmanlik = request.form.get('uzmanlik')
            sigorta = request.form.get('sigorta')
            dogumTarih = request.form.get('dogumTarih')
            adres = request.form.get('adres')
            telefonNo = request.form.get('telefonNo')

            if doktorID == "":
                hata_mesaj = "T.C Kimlik No boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not doktorID.isdigit():
                hata_mesaj = "T.C Kimlik No sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif ad == "":
                hata_mesaj = "Ad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in ad):
                hata_mesaj = "Ad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif soyad == "":
                hata_mesaj = "Soyad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in soyad):
                hata_mesaj = "Soyad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif eposta == "":
                hata_mesaj = "Eposta boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola == "":
                hata_mesaj = "Parola boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not parola.isdigit():
                hata_mesaj = "Parola sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif parola_onay == "":
                hata_mesaj = "Parola Onay boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not parola.isdigit():
                hata_mesaj = "Parola Onay sadece sayılardan oluşmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(parola) != int(parola_onay):
                hata_mesaj = "Parolalar eşleşmiyor!"
                return jsonify({'error': hata_mesaj}), 400

            elif cinsiyet == "Secilmemis":
                hata_mesaj = "Cinsiyet seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif sube == "Secilmemis":
                hata_mesaj = "Şube seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif uzmanlik == "Secilmemis":
                hata_mesaj = "Departman Adı seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif sigorta == "Secilmemis":
                hata_mesaj = "Sigorta seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif dogumTarih == "":
                hata_mesaj = "Doğum tarihi seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif adres == "":
                hata_mesaj = "Adres boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif telefonNo == "":
                hata_mesaj = "Telefon numarası boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not telefonNo.isdigit():
                hata_mesaj = "Telefon numarası sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif len(telefonNo) != 10:
                hata_mesaj = "Telefon numarası doğru uzunlukta olmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                doktorBilgi = DoktorAra(doktorID)
                if len(doktorBilgi) == 0:
                    hata_mesaj = "Bu T.C Kimlik No'ya sahip bir doktor bulunmamakta!"
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    tarihListe = dogumTarih.split("-")
                    dogumTarih = tarihListe[0] + "/" + str(int(tarihListe[1])) + "/" + str(int(tarihListe[2]))
                    con = connect_db()
                    cur = con.cursor()

                    guncelVeriler = [ad, soyad, dogumTarih, cinsiyet, telefonNo, adres, uzmanlik, sube, eposta,
                                     generate_password_hash(parola), doktorID,]
                    cur.execute('''
                    UPDATE Doktorlar
                    SET doktor_ad = ?, doktor_soyad = ?, doktor_dogumTarih = ?, doktor_cinsiyet = ?,
                    doktor_telefon = ?, doktor_adres = ?, doktor_uzmanlikAlan = ?, 
                    doktor_calisilanHastane = ?, doktor_eposta = ?, doktor_parola = ?
                    WHERE doktorID = ?''', guncelVeriler)

                    con.commit()  # Değişiklikleri kaydet
                    con.close()  # Bağlantıyı kapat
                    return jsonify(), 200

    return render_template('yoneticiMenuler/yoneticiDoktorMenu.html', title='yoneticiDoktorMenu')


@app.route('/yoneticiMenu/yoneticiRandevuMenu', methods=['GET', 'POST'])
@login_required
def yoneticiRandevuMenu():
    # Yönetici olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Yonetici":
        return redirect(url_for('girisYap'))
        # Render template only on GET requests

    if request.method == 'POST':

        islem = int(request.form.get('islem'))
        if islem == 0:  # Randevu Menüsüyle bir iş yoksa
            page = int(request.form.get("page"))
            per_page = 10
            offset = (page - 1) * per_page

            conn = connect_db()
            conn.row_factory = sqlite3.Row
            randevular = conn.execute('''SELECT * FROM Randevular 
                                                ORDER BY randevu_tarih DESC
                                                LIMIT ? 
                                                OFFSET ?''',
                                      (per_page, offset, )).fetchall()
            conn.close()
            randevu_list = [dict(row) for row in randevular]
            for randevu in randevu_list:
                hastaBilgi: tuple = HastaAra(randevu.get('hastaID'))[0]
                hasta_ad, hasta_soyad, hasta_cinsiyet, hasta_telefon, hasta_sigorta, *kalan = hastaBilgi
                doktorBilgi: tuple = DoktorAra(randevu.get('doktorID'))[0]
                (doktor_ad, doktor_soyad, doktor_dogumTarih, doktor_cinsiyet, doktor_telefon, doktor_adres, doktor_uzmanlik,
                 doktor_calisilanHastane, *kalan) = doktorBilgi
                randevu['hasta_isim'] = hasta_ad + " " + hasta_soyad
                randevu['doktor_isim'] = doktor_ad + " " + doktor_soyad
                randevu['hastane_sube'] = doktor_calisilanHastane
                randevu['doktor_uzmanlik'] = doktor_uzmanlik

            return jsonify(randevu_list), 200

        elif islem == 1:
            randevuID = request.form.get('randevuID')

            if randevuID == "":
                hata_mesaj = "RandevuID giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                con = connect_db()
                cur = con.cursor()
                randevuVeriler = cur.execute("SELECT * FROM Randevular WHERE randevuID = ?",
                                             (randevuID,)).fetchall()
                if len(randevuVeriler) == 0:
                    hata_mesaj = "Böyle bir randevu mevcut değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    cur.execute("DELETE FROM Randevular WHERE randevuID = ?",
                                (randevuID,))
                    con.commit()
                    con.close()
                    return jsonify(), 200

        elif islem == 2:
            randevuID = request.form.get('randevuID')
            saat = request.form.get('saat')
            tarih = request.form.get('tarih')

            if randevuID == "":
                hata_mesaj = "RandevuID giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            elif tarih == "":
                hata_mesaj = "Tarih seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(tarih.split("-")[0]) < 2024:
                hata_mesaj = "Yıl en az 2024 olmalı!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(tarih.split("-")[0]) > 2027:
                hata_mesaj = "Yıl en fazla 2027 olabilir!"
                return jsonify({'error': hata_mesaj}), 400

            elif saat == "":
                hata_mesaj = "Saat seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[1]) % 5 != 0:
                hata_mesaj = "Dakika 5 ve katları şeklinde seçilmelidir!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) < 8:
                hata_mesaj = "Saat Sabah 8'den öncesi için randevu ayarlanamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) > 21:
                hata_mesaj = "Saat Akşam 9'dan sonrası için randevu ayarlanamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif int(saat.split(":")[0]) >= 21 and int(saat.split(":")[1]) > 0:
                hata_mesaj = "Saat Akşam 9'dan sonrası için randevu ayarlanamaz!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                tarih = tarih.replace("-", "/")
                con = connect_db()
                cur = con.cursor()
                randevuVeriler = cur.execute("SELECT * FROM Randevular WHERE randevuID = ?",
                                             (randevuID,)).fetchall()

                if len(randevuVeriler) == 0:
                    hata_mesaj = "Böyle bir randevu mevcut değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400
                else:

                    randevu_id, doktor_id, hasta_id, *kalan = randevuVeriler[0]
                    hastaVeriler = cur.execute('''
                    SELECT * 
                    FROM Randevular 
                    WHERE hastaID = ? AND randevu_saat = ? AND randevu_tarih = ? ''',
                                               (hasta_id, saat, tarih,)).fetchall()

                    doktorVeriler = cur.execute('''
                    SELECT * 
                    FROM Randevular 
                    WHERE doktorID = ? AND randevu_saat = ? AND randevu_tarih = ? ''',
                                                (doktor_id, saat, tarih,)).fetchall()

                    if len(hastaVeriler) > 0:
                        hata_mesaj = "Hastanın o tarih ve saatte başka bir randevusu var!"
                        con.commit()
                        con.close()
                        return jsonify({'error': hata_mesaj}), 400

                    elif len(doktorVeriler) > 0:
                        hata_mesaj = "Doktorun o tarih ve saatte başka bir randevusu var!"
                        con.commit()
                        con.close()
                        return jsonify({'error': hata_mesaj}), 400

                    else:
                        cur.execute('''UPDATE Randevular 
                                        SET randevu_tarih = ?, randevu_saat = ?
                                         WHERE doktorID = ? AND randevuID = ?''',
                                    (tarih, saat, doktor_id, randevuID,))
                        con.commit()
                        con.close()
                        return jsonify(), 200

    return render_template('yoneticiMenuler/yoneticiRandevuMenu.html', title='yoneticiRandevuMenu')


@app.route('/yoneticiMenu/yoneticiRaporMenu', methods=['GET', 'POST'])
@login_required
def yoneticiRaporMenu():
    # Yönetici olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Yonetici":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':
        islem = request.form.get("islem")
        if islem == "0":
            page = int(request.form.get("page"))
            per_page = 10
            offset = (page - 1) * per_page

            conn = connect_db()
            conn.row_factory = sqlite3.Row
            raporlar = conn.execute('''
                    SELECT rap.raporID, rap.hastaID, rap.rapor_tarih, rap.rapor_icerik, rap.raporURL
                    FROM Raporlar AS rap
                    ORDER BY rap.rapor_tarih DESC
                    LIMIT ? 
                    OFFSET ?''',
                    (per_page, offset)).fetchall()
            conn.close()

            rapor_list = [dict(row) for row in raporlar]
            for rapor in rapor_list:
                hastaBilgi: tuple = HastaAra(rapor.get('hastaID'))[0]
                ad, soyad, *kalan = hastaBilgi
                rapor['hasta_isim'] = ad + " " + soyad
            return jsonify(rapor_list), 200

        elif islem == "1":
            raporID = request.form.get('raporID')
            if raporID == "":
                hata_mesaj = "RaporID giriniz!"
                return jsonify({'error': hata_mesaj}), 400
            else:

                con = connect_db()
                cur = con.cursor()
                raporVeriler = cur.execute(
                    '''
                    SELECT * 
                    FROM Raporlar AS rap
                    WHERE rap.raporID = ?
                    ''', (raporID, )).fetchall()

                if len(raporVeriler) == 0:
                    hata_mesaj = "Girilen RaporID'ye sahip bir rapor yok!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400
                else:
                    cur.execute("DELETE FROM Raporlar WHERE raporID = ?", (raporID,))
                    con.commit()
                    con.close()
                    return jsonify(), 200

        elif islem == "2":
            raporID = request.form.get('raporID')
            hastaID = request.form.get('hastaID')
            tarih = request.form.get('raporTarih')
            raporIcerik = request.form.get('raporIcerik')
            raporURL = request.form.get('raporURL')

            if raporID == "":
                hata_mesaj = "RaporID giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not raporID.isdigit():
                hata_mesaj = "RaporID sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif hastaID == "":
                hata_mesaj = "HastaID giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not hastaID.isdigit():
                hata_mesaj = "HastaID sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif tarih == "":
                hata_mesaj = "Tarih giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif raporIcerik == "":
                hata_mesaj = "Rapor içeriği giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif raporURL == "":
                hata_mesaj = "RaporURL giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                con = connect_db()
                cur = con.cursor()
                hastaBilgiler = cur.execute(
                    '''
                    SELECT * 
                    FROM Hastalar
                    WHERE hastaID = ? 
                    ''', (hastaID, )).fetchall()

                raporBilgi = RaporAra(raporID)

                if len(hastaBilgiler) == 0:
                    hata_mesaj = "Girilen HastaID'ye sahip bir hasta mevcut değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400

                elif len(raporBilgi) == 0:
                    hata_mesaj = "Girilen RaporID'ye ait bir rapor mevcut değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400

                else:
                    tarih = tarih.replace("-", "/")
                    RaporBilgisiGuncelle(raporID, raporURL, tarih, raporIcerik, hastaID)
                    con.commit()
                    con.close()
                    return jsonify(), 200

        elif islem == "3":
            hastaID = request.form.get('hastaID')
            tarih = request.form.get('raporTarih')
            raporIcerik = request.form.get('raporIcerik')
            raporURL = request.form.get('raporURL')

            if hastaID == "":
                hata_mesaj = "HastaID giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not hastaID.isdigit():
                hata_mesaj = "HastaID sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif tarih == "":
                hata_mesaj = "Tarih giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif raporIcerik == "":
                hata_mesaj = "Rapor içeriği giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif raporURL == "":
                hata_mesaj = "RaporURL giriniz!"
                return jsonify({'error': hata_mesaj}), 400

            else:
                con = connect_db()
                cur = con.cursor()
                hastaBilgiler = cur.execute(
                    '''
                    SELECT * 
                    FROM Hastalar
                    WHERE hastaID = ? 
                    ''', (hastaID, )).fetchall()


                if len(hastaBilgiler) == 0:
                    hata_mesaj = "Girilen HastaID'ye sahip bir hasta mevcut değil!"
                    con.commit()
                    con.close()
                    return jsonify({'error': hata_mesaj}), 400

                else:
                    tarih = tarih.replace("-", "/")

                    cur.execute("SELECT MAX(raporID) FROM Raporlar")
                    raporBilgiler = cur.fetchall()
                    raporID, *kalan = raporBilgiler[0]
                    if raporID is None:
                        raporID = 0
                    raporID += 1

                    rapor = TibbiRapor(raporID, raporURL, tarih, raporIcerik, hastaID)
                    RaporEkle(rapor)
                    con.commit()
                    con.close()
                    return jsonify(), 200

    return render_template('yoneticiMenuler/yoneticiRaporMenu.html', title='yoneticiRaporMenu')


@app.route('/yoneticiMenu/yoneticiProfil', methods=['GET', 'POST'])
@login_required
def yoneticiProfil():
    # Yönetici olarak mı giriş yapılmış diye kontrol eden kısım
    if not current_user.getSinif() == "Yonetici":
        return redirect(url_for('girisYap'))

    if request.method == 'POST':
        durum = request.form.get("durum")
        if durum == "bilgiDegisme":
            return jsonify(), 200

        elif durum == "bilgiİptal":
            current_user_verileri = {
                "ad": current_user.getAd(),
                "soyad": current_user.getSoyad(),
                "eposta": current_user.getEposta(),
                "cinsiyet": current_user.getCinsiyet(),
                "dogumTarih": current_user.getDogumTarih(),
                "adres": current_user.getAdres(),
                "telefonNo": current_user.getTelefonNo()
            }
            return jsonify(current_user_verileri), 200

        elif durum == "bilgiGuncelleme":

            ad = request.form.get("ad")
            soyad = request.form.get("soyad")
            eposta = request.form.get("eposta")
            cinsiyet = request.form.get("cinsiyet")
            dogumTarih = request.form.get("dogumTarih")
            adres = request.form.get("adres")
            telefonNo = request.form.get("telefonNo")

            if ad == "":
                hata_mesaj = "Ad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in ad):
                hata_mesaj = "Ad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif soyad == "":
                hata_mesaj = "Soyad boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not all(x.isalpha() or x.isspace() for x in soyad):
                hata_mesaj = "Soyad sadece harflerden oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif eposta == "":
                hata_mesaj = "Eposta boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif cinsiyet == "Secilmemis":
                hata_mesaj = "Cinsiyet seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif dogumTarih == "":
                hata_mesaj = "Doğum tarihi seçiniz!"
                return jsonify({'error': hata_mesaj}), 400

            elif adres == "":
                hata_mesaj = "Adres boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif telefonNo == "":
                hata_mesaj = "Telefon numarası boş bırakılamaz!"
                return jsonify({'error': hata_mesaj}), 400

            elif not telefonNo.isdigit():
                hata_mesaj = "Telefon numarası sadece sayılardan oluşmalıdır!"
                return jsonify({'error': hata_mesaj}), 400

            elif len(telefonNo) != 10:
                hata_mesaj = "Telefon numarası doğru uzunlukta olmalıdır!"
                return jsonify({'error': hata_mesaj}), 400
            else:
                dogumTarih.replace("-", "/")
                YoneticiBilgiGuncelle(ad, soyad, dogumTarih, cinsiyet,
                                                      telefonNo, adres, eposta, current_user.getYoneticiID())

                current_user.setAd(ad)
                current_user.setSoyad(soyad)
                current_user.setDogumTarih(dogumTarih)
                current_user.setCinsiyet(cinsiyet)
                current_user.setTelefonNo(telefonNo)
                current_user.setAdres(adres)
                current_user.setEposta(eposta)

                return jsonify(), 200

    return render_template('yoneticiMenuler/yoneticiProfil.html', title='yoneticiProfil')


turkish_cities = [
        "Adana", "Adıyaman", "Afyonkarahisar", "Ağrı", "Aksaray", "Amasya", "Ankara",
        "Antalya", "Ardahan", "Artvin", "Aydın", "Balıkesir", "Bartın", "Batman",
        "Bayburt", "Bilecik", "Bingöl", "Bitlis", "Bolu", "Burdur", "Bursa",
        "Çanakkale", "Çankırı", "Çorum", "Denizli", "Diyarbakır", "Düzce", "Edirne",
        "Elazığ", "Erzincan", "Erzurum", "Eskişehir", "Gaziantep", "Giresun", "Gümüşhane",
        "Hakkâri", "Hatay", "Iğdır", "Isparta", "İstanbul", "İzmir", "Kahramanmaraş",
        "Karabük", "Karaman", "Kars", "Kastamonu", "Kayseri", "Kırıkkale", "Kırklareli",
        "Kırşehir", "Kilis", "Kocaeli", "Konya", "Kütahya", "Malatya", "Manisa", "Mardin",
        "Mersin", "Muğla", "Muş", "Nevşehir", "Niğde", "Ordu", "Osmaniye", "Rize",
        "Sakarya", "Samsun", "Şanlıurfa", "Siirt", "Sinop", "Sivas", "Şırnak", "Tekirdağ",
        "Tokat", "Trabzon", "Tunceli", "Uşak", "Van", "Yalova", "Yozgat", "Zonguldak"
    ]

mails = ["@gmail.com", "@outlook.com", "@yahoo.com", "@hotmail.com", "@mail.ru", "@yandex.com",
         "@msn.com", "@live.com"]

sigortalar = ["Allianz", "Anadolu", "Doga", "Ak", "Axa", "Güneş", "Diger"]

sube_isimleri = [
        "Ankara Şubesi",
        "İstanbul Şubesi",
        "İzmir Şubesi",
        "Antalya Şubesi",
        "Konya Şubesi",
        "Kocaeli Şubesi",
        "Eskişehir Şubesi"
    ]

uzmanlik_alanlari = [
        "Acil Tıp", "Aile Hekimliği", "Anesteziyoloji ve Reanimasyon",
        "Beyin ve Sinir Cerrahisi", "Çocuk Cerrahisi", "Çocuk Sağlığı ve Hastalıkları",
        "Dermatoloji (Deri ve Zührevi Hastalıklar)", "Fiziksel Tıp ve Rehabilitasyon",
        "Gastroenteroloji", "Genel Cerrahi", "Göğüs Hastalıkları",
        "Göz Hastalıkları", "İç Hastalıkları", "Kadın Hastalıkları ve Doğum",
        "Kalp ve Damar Cerrahisi", "Kardiyoloji", "Kulak Burun Boğaz Hastalıkları",
        "Nöroloji", "Ortopedi ve Travmatoloji", "Psikiyatri", "Radyoloji", "Üroloji"
    ]

raporURLS = ["https://drive.google.com/file/d/1La_VSM-7_gq1LOsNhCZ96adX9yEFCoFd/view?usp=sharing",
             "https://drive.google.com/file/d/1t8RpoVmTxAnCb5to1jWHpXCsdxwE1f7R/view?usp=sharing",
             "https://drive.google.com/file/d/1MTbRP6vptlCZF9FnU5nZEqG4W_zpCBrz/view?usp=sharing"]

raporIcerikler = ["Kan Tahlili Sonuçları", "Radyoloji Görüntüleme Raporu", "Kardiyolojik Muayene Bulguları",
                  "Nörolojik Değerlendirme Sonuçları", "Onkolojik Test Bulguları", "Endokrin Sistem İncelemesi",
                  "Solunum Fonksiyonu Testi", "Gastrointestinal İnceleme Bulguları", "Ortopedik Muayene Raporu",
                  "Hematoloji Değerleri Analizi", "Ürolojik Tetkik Bulguları", "Dermatolojik Muayene Sonuçları",
                  "Psikiyatrik Değerlendirme Raporu", "Oftalmolojik Test Sonuçları", "İmmünolojik Test Bulguları"]

# Veritabanına bağlanma fonksiyonu
def connect_db():
    db = sqlite3.connect('database.db')
    db.execute('PRAGMA foreign_keys = ON;')  # FOREIGN KEY kısıtlamalarını etkinleştir
    return db


# Hastane Veritabanına ait tabloların oluşturulmasını sağlayan metot
def tabloOlustur() -> None:
    with app.app_context():

        # Veritabanı bağlantısını oluştur
        db = connect_db()

        # Bir cursor oluştur
        cur = db.cursor()

        # Hastalar Tablosu
        cur.execute('''CREATE TABLE IF NOT EXISTS Hastalar 
                        (
                        hasta_ad TEXT,
                        hasta_soyad TEXT,
                        hasta_dogumTarih TEXT, 
                        hasta_cinsiyet TEXT, 
                        hasta_telefon TEXT, 
                        hasta_adres TEXT, 
                        hasta_saglikSigorta TEXT,
                        hastaID INTEGER PRIMARY KEY,
                        hasta_eposta TEXT,
                        hasta_parola TEXT)
                        ''')

        # Hastaneleri Barındıran Tablo
        cur.execute('''CREATE TABLE IF NOT EXISTS Hastaneler
                        (
                        hastaneSube TEXT PRIMARY KEY
                        )
                        ''')

        # Uzmanlık Alanlarını Barındıran Tablo
        cur.execute('''CREATE TABLE IF NOT EXISTS UzmanlikAlanlar
                        (
                        uzmanlik TEXT PRIMARY KEY
                        )
                        ''')

        # Hastane Bilgileri Tablosu
        cur.execute('''CREATE TABLE IF NOT EXISTS HastaneBilgiler
                        (
                        hastaneSube TEXT,
                        uzmanlik TEXT,
                        PRIMARY KEY (hastaneSube, uzmanlik),
                        FOREIGN KEY (hastaneSube)  REFERENCES Hastaneler(hastaneSube),
                        FOREIGN KEY (uzmanlik)  REFERENCES UzmanlikAlanlar(uzmanlik)
                        )
                        ''')

        # Doktorlar Tablosu
        cur.execute('''CREATE TABLE IF NOT EXISTS Doktorlar 
                        (
                        doktor_ad TEXT, 
                        doktor_soyad TEXT,
                        doktor_dogumTarih TEXT, 
                        doktor_cinsiyet TEXT, 
                        doktor_telefon TEXT, 
                        doktor_adres TEXT,
                        doktor_uzmanlikAlan TEXT,
                        doktor_calisilanHastane TEXT,
                        doktorID INTEGER PRIMARY KEY,
                        doktor_eposta TEXT, 
                        doktor_parola TEXT,
                        FOREIGN KEY ( doktor_calisilanHastane, doktor_uzmanlikAlan ) REFERENCES HastaneBilgiler( hastaneSube, uzmanlik )
                        )
                        ''')

        # Yöneticiler Tablosu
        cur.execute('''CREATE TABLE IF NOT EXISTS Yoneticiler 
                        (
                        yonetici_ad TEXT, 
                        yonetici_soyad TEXT,
                        yonetici_dogumTarih TEXT, 
                        yonetici_cinsiyet TEXT, 
                        yonetici_telefon TEXT, 
                        yonetici_adres TEXT,
                        yoneticiID INTEGER PRIMARY KEY,
                        yonetici_eposta TEXT, 
                        yonetici_parola TEXT)
                        ''')

        # Randevular Tablosu
        cur.execute('''CREATE TABLE IF NOT EXISTS Randevular 
                        (
                        randevuID INTEGER PRIMARY KEY, 
                        doktorID INTEGER,
                        hastaID INTEGER,
                        randevu_tarih TEXT, 
                        randevu_saat TEXT,
                        FOREIGN KEY (doktorID) REFERENCES Doktorlar(doktorID),
                        FOREIGN KEY (hastaID) REFERENCES Hastalar(hastaID)
                        )
                        ''')


        # Tıbbi Raporlar
        cur.execute('''CREATE TABLE IF NOT EXISTS Raporlar
                        ( 
                        raporID INTEGER PRIMARY KEY,
                        raporURL TEXT,
                        rapor_tarih TEXT,
                        rapor_icerik TEXT,
                        hastaID INTEGER,
                        FOREIGN KEY (hastaID) REFERENCES Hastalar(hastaID)
                        )
                        ''')
        db.commit()  # Değişiklikleri kaydet
        db.close()  # Bağlantıyı kapat
        print("Tablo Olusturuldu")


# SQL Fonksiyonları
# A - HASTA FONKSİYONLARI
# 1 - Hasta Ekleme
def HastaEkle(hasta: Hasta) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    hasta_verileri = [hasta.getAd(), hasta.getSoyad(), hasta.getDogumTarih(), hasta.getCinsiyet(),
                      hasta.getTelefonNo(), hasta.getAdres(), hasta.getSaglikSigorta(),
                      hasta.getHastaID(), hasta.getEposta(), hasta.getParola()]
    cur.execute("INSERT INTO Hastalar VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", hasta_verileri)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat

# 2 - Hasta Silme
def HastaSil(hastaID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    RandevuSilHastaHepsi(hastaID)  # Girilen ID'ye sahip hasta randevuları siliniyor
    RaporSilHastaID(hastaID)
    # Girilen ID'ye sahip hasta varsa siliniyor
    cur.execute("DELETE FROM Hastalar WHERE hastaID=?", (hastaID,))
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 3 - Hasta Bilgisi Arama
def HastaAra(hastaID: int) -> list:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Aynı HastaID'ye sahip biri var mı kontrol ediliyor
    cur.execute("SELECT * FROM Hastalar WHERE hastaID = ?", (hastaID,))
    hastaBilgiler = cur.fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return hastaBilgiler  # Bulunan Bilgileri Geri Döndür


# 4 - Hasta Bilgi Güncelle
def HastaBilgiGuncelle(ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str,
                       saglikSigorta: str, eposta: str, hastaID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    hasta_verileri = [ad, soyad, dogumTarih, cinsiyet,
                      telefonNo, adres, saglikSigorta,
                      eposta, hastaID,]
    cur.execute('''UPDATE Hastalar
                Set hasta_ad = ?, hasta_soyad = ?, hasta_dogumTarih = ?, hasta_cinsiyet = ?,
                hasta_telefon = ?, hasta_adres = ?, hasta_saglikSigorta = ?, hasta_eposta = ?
                WHERE hastaID = ?''', hasta_verileri)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    print("Hasta Bilgileri güncellendi")


# B - HASTANE SUBE FONKSİYONLARI
# 1 - Hastane Sube Oluşturma
def SubeEkle(hastaneSube: str) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    cur.execute("INSERT INTO Hastaneler VALUES (?)", (hastaneSube,))
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 2 - Hastane Sube Silme
def SubeSil(hastaneSube: str) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    HastaneBilgiSilSube(hastaneSube)
    cur.execute("DELETE FROM Hastaneler WHERE hastaneSube = ?", (hastaneSube,))
    subeBilgiler = cur.fetchall()
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 3 - Hastane Sube Arama
def SubeAra(hastaneSube: str):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    cur.execute("SELECT * FROM Hastaneler WHERE hastaneSube = ?", (hastaneSube,))
    subeBilgiler = cur.fetchall()
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return subeBilgiler


# C - UZMANLIK ALAN FONKSİYONLARI
# 1 - Uzmanlık Alan Oluşturma
def UzmanlikEkle(uzmanlik: str) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    cur.execute("INSERT INTO UzmanlikAlanlar VALUES (?)", (uzmanlik,))
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 2 - Uzmanlık Alan Silme
def UzmanlikSil(uzmanlik: str) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    HastaneBilgiSilUzmanlik(uzmanlik)
    cur.execute("DELETE FROM UzmanlikAlanlar WHERE uzmanlik = ?", (uzmanlik,))
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 3 - Uzmanlık Alan Arama
def UzmanlikAra(uzmanlik: str):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    cur.execute("SELECT * FROM UzmanlikAlanlar WHERE uzmanlik = ?", (uzmanlik,))
    uzmanlikBilgiler = cur.fetchall()
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return uzmanlikBilgiler


# D - HASTANE BİLGİSİ FONKSİYONLARI
# 1 - Hastane Bilgisi Oluşturma
def HastaneBilgiEkle(hastaneSube: str, uzmanlik: str):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    hastaneBilgiVeriler = [hastaneSube, uzmanlik]
    cur.execute("SELECT * FROM Hastaneler WHERE hastaneSube=?", (hastaneSube,))
    hastaneSubeBilgiler = cur.fetchall()
    cur.execute("SELECT * FROM UzmanlikAlanlar WHERE uzmanlik=?", (uzmanlik,))
    uzmanlikBilgiler = cur.fetchall()

    if len(hastaneSubeBilgiler) > 0 and len(uzmanlikBilgiler) > 0:
        cur.execute("INSERT INTO HastaneBilgiler VALUES (?, ?)", hastaneBilgiVeriler)
    else:
        print("Girilen bilgiler yanlış")

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 2 - Hastane Bilgisi Silme - Girilen bilgileri içeren hastane bilgisi varsa siler
def HastaneBilgiSilBelirli(hastaneSube: str, uzmanlik: str):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    DoktorSilBelirli(hastaneSube, uzmanlik)
    cur.execute("DELETE FROM HastaneBilgiler WHERE hastaneSube = ? AND uzmanlik = ?", (hastaneSube, uzmanlik,))
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 3 - Hastane Bilgisi Silme - Girilen hastane şubesine ait hastane bilgilerini siler
def HastaneBilgiSilSube(hastaneSube: str):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    DoktorSilSube(hastaneSube)
    cur.execute("DELETE FROM HastaneBilgiler WHERE hastaneSube = ?", (hastaneSube,))
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 4 - Hastane Bilgisi Silme - Girilen uzmanlik alanına ait hastane bilgilerini siler
def HastaneBilgiSilUzmanlik(uzmanlik: str):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    DoktorSilUzmanlik(uzmanlik)
    cur.execute("DELETE FROM HastaneBilgiler WHERE uzmanlik = ?", (uzmanlik,))
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 5 - Hastane Bilgisi Arama - Girilen bilgileri içeren hastane bilgisi varsa döndürür
def HastaneBilgiAraBelirli(hastaneSube: str, uzmanlik: str):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    hastaneBilgiVeriler = [hastaneSube, uzmanlik]
    cur.execute("SELECT * FROM HastaneBilgiler WHERE hastaneSube = ? AND uzmanlik = ?", hastaneBilgiVeriler)
    hastaneBilgi = cur.fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return hastaneBilgi  # Bulunan Bilgileri Geri Döndür


# 6 - Hastane Bilgisi Arama - Girilen sube varsa hastane bilgilerini döndürür
def HastaneBilgiAraSube(hastaneSube: str):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    cur.execute("SELECT * FROM HastaneBilgiler WHERE hastaneSube = ?", (hastaneSube,))
    hastaneBilgi = cur.fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return hastaneBilgi  # Bulunan Bilgileri Geri Döndür


# 7 - Hastane Bilgisi Arama - Girilen uzmanlik alanını içeren hastane bilgilerini döndürür
def HastaneBilgiAraUzmanlik(uzmanlik: str):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    cur.execute("SELECT * FROM HastaneBilgiler WHERE uzmanlik = ?", (uzmanlik,))
    hastaneBilgi = cur.fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return hastaneBilgi  # Bulunan Bilgileri Geri Döndür


# E - DOKTOR FONKSİYONLARI
# 1 - Doktor Ekleme
def DoktorEkle(doktor: Doktor) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    doktor_verileri = [doktor.getAd(), doktor.getSoyad(), doktor.getDogumTarih(), doktor.getCinsiyet(),
                       doktor.getTelefonNo(), doktor.getAdres(), doktor.getUzmanlikAlan(),
                       doktor.getCalisilanHastane(), doktor.getDoktorID(), doktor.getEposta(), doktor.getParola()]
    cur.execute("INSERT INTO Doktorlar VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", doktor_verileri)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat

# 2 - Doktor Silme
def DoktorSil(doktorID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    RandevuSilDoktorHepsi(doktorID)  # Girilen ID'ye sahip doktorun randevuları siliniyor
    # Girilen ID'ye sahip doktor varsa siliniyor
    cur.execute("DELETE FROM Doktorlar WHERE doktorID=?", (doktorID,))
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 3 - Doktor Silme - Belirli bir hastane şubesinde doktorları siler
def DoktorSilSube(hastaneSube: str) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Girilen şubedeki tüm doktorlar siliniyor
    cur.execute("SELECT doktorID FROM Doktorlar WHERE doktor_calisilanHastane=?", (hastaneSube,))
    doktorBilgileri = cur.fetchall()
    for doktorBilgi in doktorBilgileri:
        doktorID, *kalan = doktorBilgi
        DoktorSil(doktorID)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 4 - Doktor Silme - Belirli bir uzmanlığa sahip tüm doktorları siler
def DoktorSilUzmanlik(uzmanlik: str) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Girilen uzmanlığa sahip tüm doktorlar siliniyor
    cur.execute("SELECT doktorID FROM Doktorlar WHERE doktor_uzmanlikAlan=?", (uzmanlik,))
    doktorBilgileri = cur.fetchall()
    for doktorBilgi in doktorBilgileri:
        doktorID, *kalan = doktorBilgi
        DoktorSil(doktorID)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 5 - Doktor Silme - Girilen hastane bilgilerine sahip doktorları siler
def DoktorSilBelirli(hastaneSube: str, uzmanlik: str) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Girilen hastane bilgilerine sahip tüm doktorlar siliniyor
    cur.execute("SELECT doktorID FROM Doktorlar WHERE doktor_uzmanlikAlan=? AND doktor_calisilanHastane=?",
                (uzmanlik, hastaneSube))
    doktorBilgileri = cur.fetchall()
    for doktorBilgi in doktorBilgileri:
        doktorID, *kalan = doktorBilgi
        DoktorSil(doktorID)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 6 - Doktor Bilgisi Arama
def DoktorAra(doktorID: int) -> list:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Aynı DoktorID'ye sahip biri var mı kontrol ediliyor
    cur.execute("SELECT * FROM Doktorlar WHERE doktorID = ?", (doktorID,))
    doktorBilgiler = cur.fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return doktorBilgiler  # Bulunan Bilgileri Geri Döndür


# 7 - Doktor Bilgi Güncelle
def DoktorBilgiGuncelle(ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str,
                        eposta: str, doktorID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    doktor_verileri = [ad, soyad, dogumTarih, cinsiyet,
                       telefonNo, adres,
                       eposta, doktorID,]
    cur.execute('''UPDATE Doktorlar
                Set doktor_ad = ?, doktor_soyad = ?, doktor_dogumTarih = ?, doktor_cinsiyet = ?,
                doktor_telefon = ?, doktor_adres = ?, doktor_eposta = ?
                WHERE doktorID = ?''', doktor_verileri)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    print("Doktor Bilgileri güncellendi")


# F - YONETİCİ FONKSİYONLARI
# 1 - Yönetici Ekleme
def YoneticiEkle(yonetici: Yonetici) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    yonetici_verileri = [yonetici.getAd(), yonetici.getSoyad(), yonetici.getDogumTarih(), yonetici.getCinsiyet(),
                         yonetici.getTelefonNo(), yonetici.getAdres(), yonetici.getYoneticiID(), yonetici.getEposta(),
                         yonetici.getParola(),]
    cur.execute("INSERT INTO Yoneticiler VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", yonetici_verileri)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat

# 2 - Yönetici Silme
def YoneticiSil(yoneticiID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Girilen ID'ye sahip biri varsa bulunup siliniyor
    cur.execute("DELETE FROM Yoneticiler WHERE yoneticiID=?", (yoneticiID,))
    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat

# 3 - Yönetici Bilgisi Arama
def YoneticiAra(yoneticiID: int) -> list:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Aynı YoneticiID'ye sahip biri var mı kontrol ediliyor
    cur.execute("SELECT * FROM Yoneticiler WHERE yoneticiID = ?", (yoneticiID,))
    yoneticiBilgiler = cur.fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return yoneticiBilgiler  # Bulunan Bilgileri Geri Döndür


# 4 - Yönetici Bilgi Güncelle
def YoneticiBilgiGuncelle(ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str,
                          eposta: str, yoneticiID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    yonetici_verileri = [ad, soyad, dogumTarih, cinsiyet,
                         telefonNo, adres,
                         eposta, yoneticiID,]
    cur.execute('''UPDATE Yoneticiler
                SET yonetici_ad = ?, yonetici_soyad = ?, yonetici_dogumTarih = ?, yonetici_cinsiyet = ?,
                yonetici_telefon = ?, yonetici_adres = ?, yonetici_eposta = ?
                WHERE yoneticiID = ?''', yonetici_verileri)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat

# G - RANDEVU FONKSİYONLARI
# 1 - Randevu Oluşturma
def RandevuEkle(randevu: Randevu) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    randevu_verileri = [randevu.getRandevuID(), randevu.getRandevuDoktorID(), randevu.getRandevuHastaID(),
                        randevu.getRandevuTarih(), randevu.getRandevuSaat()]
    cur.execute("INSERT INTO Randevular VALUES (?, ?, ?, ?, ?)", randevu_verileri)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat

# 2 - HastaID ile Randevu Bilgisi Arama
def RandevuAraHastaID(hastaID: int) -> list:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # HastaID'ye sahip randevuları bulur
    cur.execute("SELECT * FROM Randevular WHERE hastaID = ?", (hastaID,))
    randevuBilgiler = cur.fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return randevuBilgiler  # Bulunan Bilgileri Geri Döndür

# 3 - DoktorID ile Randevu Bilgisi Arama
def RandevuAraDoktorID(doktorID: int) -> list:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # DoktorID'ye sahip randevuları bulur
    cur.execute("SELECT * FROM Randevular WHERE doktorID = ?", (doktorID,))
    randevuBilgiler = cur.fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return randevuBilgiler  # Bulunan Bilgileri Geri Döndür

# 4 - Randevu Silme
def RandevuSilBelirli(doktorID: int, hastaID: int, randevuTarih: str, randevuSaat: str) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Uygun Randevu varsa bulup onu siler
    randevu_veriler = (doktorID, hastaID, randevuTarih, randevuSaat,)
    cur.execute('''DELETE FROM Randevular WHERE hastaID = ? AND doktorID = ? 
                AND randevu_tarih = ? AND randevu_saat = ?''', randevu_veriler)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 5 - Randevu Silme - Bir doktora ait tüm randevuları siler
def RandevuSilDoktorHepsi(doktorID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Uygun Randevu varsa bulup onu siler
    cur.execute('''DELETE FROM Randevular WHERE doktorID = ?''', (doktorID,))

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 6 - Randevu Silme - Bir hastaya ait tüm randevuları siler
def RandevuSilHastaHepsi(hastaID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Uygun Randevu varsa bulup onu siler
    cur.execute('''DELETE FROM Randevular WHERE hastaID = ?''', (hastaID,))

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# H - RAPOR FONKSİYONLARI
# 1 - Rapor Ekle
def RaporEkle(rapor: TibbiRapor):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    raporVeriler = [rapor.getRaporID(), rapor.getRaporURL(), rapor.getRaporTarih(),
                    rapor.getRaporIcerik(), rapor.getRaporHastaID()]

    cur.execute("INSERT INTO Raporlar VALUES (?,?,?,?,?)", raporVeriler)

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 2 - Rapor Sil
def RaporSil(raporID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    cur.execute("DELETE FROM Raporlar WHERE raporID = ?", (raporID,))

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 3 - Rapor Sil HastaID
def RaporSilHastaID(hastaID: int) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    cur.execute("DELETE FROM Raporlar WHERE hastaID = ?", (hastaID,))

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 4 - Rapor Bilgisi Güncelle
def RaporBilgisiGuncelle(raporID, raporURL, raporTarih, raporIcerik, HastaID) -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    cur.execute('''UPDATE Raporlar SET raporURL = ?, rapor_tarih = ?, rapor_icerik = ?, HastaID = ?
    WHERE raporID = ?''', (raporURL, raporTarih, raporIcerik, HastaID, raporID))

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 5 - Rapor Ara
def RaporAra(raporID: int):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    raporVeri = cur.execute('''SELECT * FROM Raporlar WHERE raporID = ?''', (raporID, )).fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return raporVeri


# 6 - Rapor Ara HastaID
def RaporAraHastaID(hastaID: int):
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    raporVeri = cur.execute('''SELECT * FROM Raporlar WHERE hastaID = ?''', (hastaID, )).fetchall()

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat
    return raporVeri


# G - VERİ OLUŞTURMA FONKSİYONLARI
# 1 - Sube Verisi Olustur
def SubeVerisiOlustur() -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    for sube in sube_isimleri:
        cur.execute("INSERT INTO Hastaneler VALUES (?)", (sube,))

    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 2 - Uzmanlık Alanı Verisi Olustur
def UzmanlikAlanVerisiOlustur() -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    for uzmanlik_alan in uzmanlik_alanlari:
        cur.execute("INSERT INTO UzmanlikAlanlar VALUES (?)", (uzmanlik_alan,))


    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 3 - Hastane Bilgi Verisi Olustur
def HastaneBilgiVerisiOlustur() -> None:
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur

    # Hastane ve Uzmanlık Alan Bilgisi Çekme
    cur.execute("SELECT * FROM Hastaneler")
    sube_bilgiler = cur.fetchall()
    cur.execute("SELECT * FROM UzmanlikAlanlar")
    uzmanlik_alanlar_bilgiler = cur.fetchall()

    for sube_bilgi in sube_bilgiler:
        for uzmanlik_alan_bilgi in uzmanlik_alanlar_bilgiler:
            sube, *kalan = sube_bilgi
            uzmanlik_alan, *kalan = uzmanlik_alan_bilgi
            cur.execute("INSERT INTO HastaneBilgiler VALUES (?, ?)", (sube, uzmanlik_alan,))


    conn.commit()  # Değişiklikleri kaydet
    conn.close()  # Bağlantıyı kapat


# 4 - Doktor Verisi oluşturan fonksiyon
def DoktorVerisiOlustur():
    conn = connect_db()  # Veritabanı bağlantısını oluştur
    cur = conn.cursor()  # Bir cursor oluştur
    fake = faker.Faker('tr_TR')
    cur.execute("SELECT * FROM HastaneBilgiler")
    hastaneBilgiler = cur.fetchall()

    for i in range(1, 1201):
        # Doktor Nesnesine ait bilgileri oluşturur
        doktorID = str(random.randint(10000000000, 19999999999))
        telefon = str(random.randint(5000000000, 5999999999))

        adres = random.choice(turkish_cities)
        eposta = fake.email().split("@")[0] + random.choice(mails)
        parola = generate_password_hash("123")

        gun = random.randint(1, 30)
        ay = random.randint(1, 12)
        yil = random.randint(1960, 2000)
        dogumTarih = str(yil) + "/" + str(ay) + "/" + str(gun)

        calisilanHastane, uzmanlikAlan = random.choice(hastaneBilgiler)

        secenek = random.randint(0, 1)
        if secenek == 0:  # Erkek ise
            cinsiyet = "Erkek"
            secenek_isim = random.randint(0, 1)
            if secenek_isim == 0:
                ad = fake.first_name_male()
            else:
                ad = fake.first_name_male() + " " + fake.first_name_male()

            soyad = fake.last_name_male()
        else:
            cinsiyet = "Kadın"
            secenek_isim = random.randint(0, 1)
            if secenek_isim == 0:
                ad = fake.first_name_female()
            else:
                ad = fake.first_name_female() + " " + fake.first_name_female()
            soyad = fake.last_name_female()

        print(f"{i + 1}. Doktor oluşturuldu.\n"
              f"doktorID: {doktorID}\n"
              f"Telefon:  {telefon}\n"
              f"Cinsiyet: {cinsiyet}\n"
              f"İsim: {ad} {soyad}\n"
              f"Şehir: {adres}\n"
              f"Eposta: {eposta}\n"
              f"Parola: {parola}\n"
              f"Doğum Tarihi: {dogumTarih}\n"
              f"Uzmanlık Alan: {uzmanlikAlan}\n"
              f"Çalışılan Hastane Şubesi: {calisilanHastane}\n")

        # Oluşturulan ID'ye sahip biri var mı diye kontrol eder
        hastaBilgiler = HastaAra(doktorID)
        yoneticiBilgiler = YoneticiAra(doktorID)
        doktorBilgiler = DoktorAra(doktorID)
        if len(hastaBilgiler) > 0 or len(yoneticiBilgiler) > 0 or len(doktorBilgiler) > 0:
            print("Böyle bir İD'ye sahip kayıt zaten var.")
        else:
            doktor = Doktor(ad, soyad, dogumTarih, cinsiyet, telefon, adres, uzmanlikAlan,
                                     calisilanHastane, doktorID, eposta, parola)
            DoktorEkle(doktor)
            print("Doktor Eklendi")

    conn.commit()
    conn.close()

# 5 - Hasta Verisi oluşturan fonksiyon
def HastaVerisiOlustur():
    fake = faker.Faker('tr_TR')

    for i in range(1, 6001):
        hastaID = str(random.randint(10000000000, 67999999999))
        telefon = str(random.randint(5000000000, 5999999999))

        adres = random.choice(turkish_cities)
        eposta = fake.email().split("@")[0] + random.choice(mails)
        parola = generate_password_hash("123")

        gun = random.randint(1, 30)
        ay = random.randint(1, 12)
        yil = random.randint(1950, 2015)
        dogumTarih = str(yil) + "/" + str(ay) + "/" + str(gun)
        sigorta = random.choice(sigortalar)

        secenek = random.randint(0, 1)
        if secenek == 0:  # Erkek ise
            cinsiyet = "Erkek"
            secenek_isim = random.randint(0, 1)
            if secenek_isim == 0:
                ad = fake.first_name_male()
            else:
                ad = fake.first_name_male() + " " + fake.first_name_male()

            soyad = fake.last_name_male()
        else:
            cinsiyet = "Kadın"
            secenek_isim = random.randint(0, 1)
            if secenek_isim == 0:
                ad = fake.first_name_female()
            else:
                ad = fake.first_name_female() + " " + fake.first_name_female()
            soyad = fake.last_name_female()


        print(f"{i + 1}. Hasta oluşturuldu.\n"
              f"hastaID: {hastaID}\n"
              f"Telefon:  {telefon}\n"
              f"Cinsiyet: {cinsiyet}\n"
              f"İsim: {ad} {soyad}\n"
              f"Şehir: {adres}\n"
              f"Eposta: {eposta}\n"
              f"Parola: {parola}\n"
              f"Doğum Tarihi: {dogumTarih}\n"
              f"Sigorta: {sigorta}\n\n")

        hastaBilgiler = HastaAra(hastaID)
        yoneticiBilgiler = YoneticiAra(hastaID)
        doktorBilgiler = DoktorAra(hastaID)
        if len(hastaBilgiler) > 0 or len(yoneticiBilgiler) > 0 or len(doktorBilgiler) > 0:
            print("Böyle bir İD'ye sahip kayıt zaten var.")
        else:
            hasta = Hasta(ad, soyad, dogumTarih, cinsiyet, telefon, adres,
                                   sigorta, hastaID, eposta, parola)
            HastaEkle(hasta)
            print("Hasta Eklendi")


# 6 - Randevu Verisi oluşturur
def RandevuVerisiOlustur():
    db = connect_db()
    cur = db.cursor()
    cur.execute("SELECT hastaID FROM Hastalar WHERE hastaID IS NOT NULL")
    hastaBilgier = cur.fetchall()

    cur.execute("SELECT doktorID FROM Doktorlar WHERE doktorID IS NOT NULL")
    doktorBilgiler = cur.fetchall()

    cur.execute("SELECT MAX(randevuID) FROM Randevular")
    randevu_bilgiler = cur.fetchall()
    next_randevu_id, *kalan = randevu_bilgiler[0]
    if next_randevu_id is None:
        next_randevu_id = 0
    next_randevu_id += 1

    for hastaBilgi in hastaBilgier:
        hastaID, *kalan = hastaBilgi
        randevu_sayisi = random.randint(80, 110)
        for i in range(1, randevu_sayisi):
            # Randevuya ait olan bilgilerin seçilmesi
            doktorBilgi = random.choice(doktorBilgiler)
            doktorID, *kalan = doktorBilgi
            gun = random.randint(1, 30)
            ay = random.randint(1, 12)
            yil = random.randint(2001, 2027)
            saat = random.randint(7, 20)
            dakika = random.randint(0, 59)
            dakika = dakika - (dakika % 5)
            if saat < 10:
                saat = "0" + str(saat)
            if dakika < 10:
                dakika = "0" + str(dakika)
            if gun < 10:
                gun = "0" + str(gun)
            if ay < 10:
                ay = "0" + str(ay)

            randevu_tarih = str(yil) + "/" + str(ay) + "/" + str(gun)
            randevu_zaman = str(saat) + ":" + str(dakika)

            # Randevunun Nesnesinin Oluşturulması
            randevu = Randevu(next_randevu_id, doktorID, hastaID, randevu_tarih, randevu_zaman)
            RandevuEkle(randevu)  # Randevunun veritabanına eklenmesi
            next_randevu_id = next_randevu_id + 1
            db.commit()

    db.close()


# 7 - Sitede bulunacak yöneticileri oluşturan fonksiyon
def yoneticileriOlustur() -> None:
    yonetici1 = Yonetici("Selim Eren", "Kaya", "20/09/2004", "Erkek",
                                  "5416798301", "Kocaeli", "10013168314",
                                  "selim@gmail.com", generate_password_hash("123"),)
    if len(YoneticiAra(yonetici1.getYoneticiID())) == 0:
        YoneticiEkle(yonetici1)

    yonetici2 = Yonetici("Bilge", "Çeşme", "7/01/2004", "Kadın",
                                  "2355354235", "İzmir", "13523535035",
                                  "bilge@gmail.com", generate_password_hash("bilge35Forever"))
    if len(YoneticiAra(yonetici2.getYoneticiID())) == 0:
        YoneticiEkle(yonetici2)

    yonetici3 = Yonetici("Yalçın", "Dağbaşı", "27/09/2003", "Erkek",
                                  "2503054824", "Çanakkale", "20030035140",
                                  "yalcin@gmail.com", generate_password_hash("Yalcin123"))
    if len(YoneticiAra(yonetici3.getYoneticiID())) == 0:
        YoneticiEkle(yonetici3)


# Veri Temizleme Fonksiyonu
# Sıfırdan veriler oluşturulmayacağı sürece çağrılmamalı
def VeritabaniVeriTemizle():
    con = connect_db()
    cur = con.cursor()
    cur.execute("DELETE FROM Randevular WHERE 1=1")
    cur.execute("DELETE FROM Doktorlar WHERE 1=1")
    cur.execute("DELETE FROM HastaneBilgiler WHERE 1=1")
    cur.execute("DELETE FROM UzmanlikAlanlar WHERE 1=1")
    cur.execute("DELETE FROM Hastaneler WHERE 1=1")
    cur.execute("DELETE FROM Hastalar WHERE 1=1")
    con.commit()
    con.close()


def RaporVeriOlustur():
    con = connect_db()
    cur = con.cursor()
    cur.execute("SELECT hastaID FROM Hastalar WHERE hastaID IS NOT NULL")
    hastaBilgier = cur.fetchall()

    cur.execute("SELECT MAX(raporID) FROM Raporlar")
    raporBilgiler = cur.fetchall()
    next_rapor_id, *kalan = raporBilgiler[0]
    if next_rapor_id is None:
        next_rapor_id = 0
    next_rapor_id += 1
    sayac = 1
    for hastaBilgi in hastaBilgier:
        hastaID, *kalan = hastaBilgi
        rapor_sayisi = random.randint(7, 12)
        for i in range(1, rapor_sayisi):

            gun = random.randint(1, 30)
            ay = random.randint(1, 12)
            yil = random.randint(2014, 2025)
            saat = random.randint(7, 20)
            dakika = random.randint(0, 59)
            dakika = dakika - (dakika % 5)
            if saat < 10:
                saat = "0" + str(saat)
            if dakika < 10:
                dakika = "0" + str(dakika)
            if gun < 10:
                gun = "0" + str(gun)
            if ay < 10:
                ay = "0" + str(ay)

            rapor_tarih = str(yil) + "/" + str(ay) + "/" + str(gun)

            rapor_url = random.choice(raporURLS)
            rapor_icerik = random.choice(raporIcerikler)

            rapor = TibbiRapor(next_rapor_id, rapor_url, rapor_tarih, rapor_icerik, hastaID)
            RaporEkle(rapor)
            next_rapor_id = next_rapor_id + 1
            print(sayac)
            sayac += 1
            con.commit()

    con.close()


# Randevu Sınıfı
class Randevu:
    def __init__(self, randevuID: int, randevuDoktorID: int, randevuHastaID: int,
                 randevuTarih: str, randevuSaat: str) -> None:
        self.__randevuID = randevuID
        self.__randevuTarih = randevuTarih
        self.__randevuSaat = randevuSaat
        self.__randevuDoktorID = randevuDoktorID
        self.__randevuHastaID = randevuHastaID
        print("Randevu")

    # Get/Set Metotları
    # 1-Get Metotları
    def getRandevuID(self) -> int:
        return self.__randevuID

    def getRandevuTarih(self) -> str:
        return self.__randevuTarih

    def getRandevuSaat(self) -> str:
        return self.__randevuSaat

    def getRandevuDoktorID(self) -> int:
        return self.__randevuDoktorID

    def getRandevuHastaID(self) -> int:
        return self.__randevuHastaID

    # 2-Set Metotları
    def setRandevuID(self, randevuID: int) -> None:
        self.__randevuID = randevuID

    def setRandevuTarih(self, randevuTarih: str) -> None:
        self.__randevuTarih = randevuTarih

    def setRandevuSaat(self, randevuSaat: str) -> None:
        self.__randevuSaat = randevuSaat

    def setRandevuDoktorID(self, randevuDoktorID: int) -> None:
        self.__randevuDoktorID = randevuDoktorID

    def setRandevuHastaID(self, randevuHastaID: int) -> None:
        self.__randevuHastaID = randevuHastaID


# Tıbbi Rapor Sınıfı
class TibbiRapor:
    def __init__(self, raporID: int, raporURL: str, raporTarih: str,  raporIcerik: str, raporHastaID: int) -> None:
        self.__raporID = raporID
        self.__raporURL = raporURL
        self.__raporTarih = raporTarih
        self.__raporIcerik = raporIcerik
        self.__raporHastaID = raporHastaID
        print("Tıbbi Rapor")

    # Get/Set Metotları
    # 1-Get Metotları
    def getRaporID(self) -> int:
        return self.__raporID

    def getRaporURL(self) -> str:
        return self.__raporURL

    def getRaporTarih(self) -> str:
        return self.__raporTarih

    def getRaporIcerik(self) -> str:
        return self.__raporIcerik

    def getRaporHastaID(self) -> int:
        return self.__raporHastaID

    # 2-Set Metotları
    def setRaporID(self, raporID: int) -> None:
        self.__raporID = raporID

    def setRaporURL(self, raporURL: str) -> None:
        self.__raporURL = raporURL

    def setRaporTarih(self, raporTarih: str) -> None:
        self.__raporTarih = raporTarih

    def setRaporIcerik(self, raporIcerik: str) -> None:
        self.__raporIcerik = raporIcerik

    def setRaporHastaID(self, raporHastaID: int) -> None:
        self.__raporHastaID = raporHastaID


# İnsan Sınıfı
class Insan(UserMixin):
    def __init__(self, ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str) -> None:
        self.__ad = ad
        self.__soyad = soyad
        self.__dogumTarih = dogumTarih
        self.__cinsiyet = cinsiyet
        self.__telefonNo = telefonNo
        self.__adres = adres

    # Get/Set Metotları
    # 1-Get Metotları
    def getAd(self) -> str:
        return self.__ad

    def getSoyad(self) -> str:
        return self.__soyad

    def getDogumTarih(self) -> str:
        return self.__dogumTarih

    def getCinsiyet(self) -> str:
        return self.__cinsiyet

    def getTelefonNo(self) -> str:
        return self.__telefonNo

    def getAdres(self) -> str:
        return self.__adres

    # 2-Set Metotları
    def setAd(self, ad: str) -> None:
        self.__ad = ad

    def setSoyad(self, soyad: str) -> None:
        self.__soyad = soyad

    def setDogumTarih(self, dogumTarih: str) -> None:
        self.__dogumTarih = dogumTarih

    def setCinsiyet(self, cinsiyet: str) -> None:
        self.__cinsiyet = cinsiyet

    def setTelefonNo(self, telefonNo: str) -> None:
        self.__telefonNo = telefonNo

    def setAdres(self, adres: str) -> None:
        self.__adres = adres


# Hasta Sınıfı
class Hasta(Insan):
    # Ad, Soyad, Doğum Tarihi, Cinsiyet, Telefon, Adres, Sağlık Sigortası, Tc Kimlik No (Hasta ID), Eposta, Parola
    def __init__(self, ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str,
                 saglikSigorta: str, hastaID: int, eposta: str, parola: str) -> None:
        super().__init__(ad, soyad, dogumTarih, cinsiyet, telefonNo, adres)
        self.__hastaID = hastaID
        self.id = self.__hastaID
        self.__saglikSigorta = saglikSigorta
        self.__eposta = eposta
        self.__parola = parola
        self.__sinif = "Hasta"

    # Get/Set Metotları
    # 1-Get Metotları
    def getSinif(self):
        return self.__sinif

    def getHastaID(self) -> int:
        return self.__hastaID

    def getSaglikSigorta(self) -> str:
        return self.__saglikSigorta

    def getEposta(self) -> str:
        return self.__eposta

    def getParola(self) -> str:
        return self.__parola

    # 2-Set Metotları
    def setHastaID(self, hastaID: int) -> None:
        self.__hastaID = hastaID

    def setSaglikSigorta(self, saglikSigorta: str) -> None:
        self.__saglikSigorta = saglikSigorta

    def setEposta(self, eposta: str) -> None:
        self.__eposta = eposta

    def setParola(self, parola: str) -> None:
        self.__parola = parola

    def __str__(self):
        return (f'Hasta ID: {self.getHastaID()}\n'
                f'Parola: {self.getParola()}\n'
                f'İsim: {self.getAd()} {self.getSoyad()}\n'
                f'Eposta: {self.getEposta()}\n'
                f'Telefon: {self.getTelefonNo()}\n'
                f'Sigorta: {self.getSaglikSigorta()}\n'
                f'Adres: {self.getAdres()}\n'
                f'Doğum Tarihi: {self.getDogumTarih()}\n'
                f'Cinsiyet: {self.getCinsiyet()}\n')


# Doktor Sınıfı
class Doktor(Insan):
    def __init__(self, ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str,
                 uzmanlikAlan: str, calisilanHastane: str, doktorID: int, eposta: str, parola: str) -> None:
        super().__init__(ad, soyad, dogumTarih, cinsiyet, telefonNo, adres)
        self.__doktorID = doktorID
        self.id = self.__doktorID
        self.__uzmanlikAlan = uzmanlikAlan
        self.__calisilanHastane = calisilanHastane
        self.__parola = parola
        self.__eposta = eposta
        self.__sinif = "Doktor"

    # Get/Set Metotları
    # 1-Get Metotları
    def getSinif(self):
        return self.__sinif

    def getDoktorID(self) -> int:
        return self.__doktorID

    def getUzmanlikAlan(self) -> str:
        return self.__uzmanlikAlan

    def getCalisilanHastane(self) -> str:
        return self.__calisilanHastane

    def getParola(self) -> str:
        return self.__parola

    def getEposta(self) -> str:
        return self.__eposta

    # 2-Set Metotları
    def setDoktorID(self, doktorID: int) -> None:
        self.__doktorID = doktorID

    def setUzmanlikAlan(self, uzmanlikAlan: str) -> None:
        self.__uzmanlikAlan = uzmanlikAlan

    def setCalisilanHastane(self, calisilanHastane: str) -> None:
        self.__calisilanHastane = calisilanHastane

    def setParola(self, parola: str) -> None:
        self.__parola = parola

    def setEposta(self, eposta: str) -> None:
        self.__eposta = eposta

    def __str__(self):
        return (f'Ad: {self.getAd()}\n'
                f'Soyad: {self.getSoyad()}\n'
                f'Doğum Tarihi: {self.getDogumTarih()}\n'
                f'Cinsiyet: {self.getCinsiyet()}\n'
                f'Telefon Numarası: {self.getTelefonNo()}\n'
                f'Adres: {self.getAdres()}\n'
                f'Doktor ID: {self.getDoktorID()}\n'
                f'Uzmanlık Alanı: {self.getUzmanlikAlan()}\n'
                f'Çalışılan Hastane: {self.getCalisilanHastane()}\n'
                f'Parola: {self.getParola()}\n')


# Yönetici Sınıfı
class Yonetici(Insan):
    def __init__(self, ad: str, soyad: str, dogumTarih: str, cinsiyet: str, telefonNo: str, adres: str,
                 yoneticiID: int, eposta: str, parola: str) -> None:
        super().__init__(ad, soyad, dogumTarih, cinsiyet, telefonNo, adres)
        self.__yoneticiID = yoneticiID
        self.id = self.__yoneticiID
        self.__parola = parola
        self.__eposta = eposta
        self.__sinif = "Yonetici"

    # Get/Set Metotları
    # 1-Get Metotları
    def getSinif(self):
        return self.__sinif

    def getYoneticiID(self) -> int:
        return self.__yoneticiID

    def getParola(self) -> str:
        return self.__parola

    def getEposta(self) -> str:
        return self.__eposta

    # 2-Set Metotları
    def setYoneticiID(self, yoneticiID: int) -> None:
        self.__yoneticiID = yoneticiID

    def setParola(self, parola: str) -> None:
        self.__parola = parola

    def setEposta(self, eposta: str) -> None:
        self.__eposta = eposta

    def __str__(self):
        return (f'Ad: {self.getAd()}\n'
                f'Soyad: {self.getSoyad()}\n'
                f'Doğum Tarihi: {self.getDogumTarih()}\n'
                f'Cinsiyet: {self.getCinsiyet()}\n'
                f'Telefon Numarası: {self.getTelefonNo()}\n'
                f'Adres: {self.getAdres()}\n'
                f'Yönetici ID: {self.getYoneticiID()}\n'
                f'Parola: {self.getParola()}\n')



if __name__ == '__main__':
    app.run()
